)]}'
{"version":3,"file":"demopolararea.js","sources":["../../../packages/rtl/rtl.js","../../../packages/rtl/system.pas","../../../packages/rtl/js.pas","../../../packages/chartjs/chartjs.pas","../demopolararea.lpr"],"sourcesContent":["var pas = {};\n\nvar rtl = {\n\n  version: 10408,\n\n  quiet: false,\n  debug_load_units: false,\n  debug_rtti: false,\n\n  debug: function(){\n    if (rtl.quiet || !console || !console.log) return;\n    console.log(arguments);\n  },\n\n  error: function(s){\n    rtl.debug('Error: ',s);\n    throw s;\n  },\n\n  warn: function(s){\n    rtl.debug('Warn: ',s);\n  },\n\n  checkVersion: function(v){\n    if (rtl.version != v) throw \"expected rtl version \"+v+\", but found \"+rtl.version;\n  },\n\n  hiInt: Math.pow(2,53),\n\n  hasString: function(s){\n    return rtl.isString(s) && (s.length>0);\n  },\n\n  isArray: function(a) {\n    return Array.isArray(a);\n  },\n\n  isFunction: function(f){\n    return typeof(f)===\"function\";\n  },\n\n  isModule: function(m){\n    return rtl.isObject(m) && rtl.hasString(m.$name) && (pas[m.$name]===m);\n  },\n\n  isImplementation: function(m){\n    return rtl.isObject(m) && rtl.isModule(m.$module) && (m.$module.$impl===m);\n  },\n\n  isNumber: function(n){\n    return typeof(n)===\"number\";\n  },\n\n  isObject: function(o){\n    var s=typeof(o);\n    return (typeof(o)===\"object\") && (o!=null);\n  },\n\n  isString: function(s){\n    return typeof(s)===\"string\";\n  },\n\n  getNumber: function(n){\n    return typeof(n)===\"number\"?n:NaN;\n  },\n\n  getChar: function(c){\n    return ((typeof(c)===\"string\") && (c.length===1)) ? c : \"\";\n  },\n\n  getObject: function(o){\n    return ((typeof(o)===\"object\") || (typeof(o)==='function')) ? o : null;\n  },\n\n  isTRecord: function(type){\n    return (rtl.isObject(type) && type.hasOwnProperty('$new') && (typeof(type.$new)==='function'));\n  },\n\n  isPasClass: function(type){\n    return (rtl.isObject(type) && type.hasOwnProperty('$classname') && rtl.isObject(type.$module));\n  },\n\n  isPasClassInstance: function(type){\n    return (rtl.isObject(type) && rtl.isPasClass(type.$class));\n  },\n\n  hexStr: function(n,digits){\n    return (\"000000000000000\"+n.toString(16).toUpperCase()).slice(-digits);\n  },\n\n  m_loading: 0,\n  m_loading_intf: 1,\n  m_intf_loaded: 2,\n  m_loading_impl: 3, // loading all used unit\n  m_initializing: 4, // running initialization\n  m_initialized: 5,\n\n  module: function(module_name, intfuseslist, intfcode, impluseslist, implcode){\n    if (rtl.debug_load_units) rtl.debug('rtl.module name=\"'+module_name+'\" intfuses='+intfuseslist+' impluses='+impluseslist+' hasimplcode='+rtl.isFunction(implcode));\n    if (!rtl.hasString(module_name)) rtl.error('invalid module name \"'+module_name+'\"');\n    if (!rtl.isArray(intfuseslist)) rtl.error('invalid interface useslist of \"'+module_name+'\"');\n    if (!rtl.isFunction(intfcode)) rtl.error('invalid interface code of \"'+module_name+'\"');\n    if (!(impluseslist==undefined) && !rtl.isArray(impluseslist)) rtl.error('invalid implementation useslist of \"'+module_name+'\"');\n    if (!(implcode==undefined) && !rtl.isFunction(implcode)) rtl.error('invalid implementation code of \"'+module_name+'\"');\n\n    if (pas[module_name])\n      rtl.error('module \"'+module_name+'\" is already registered');\n\n    var module = pas[module_name] = {\n      $name: module_name,\n      $intfuseslist: intfuseslist,\n      $impluseslist: impluseslist,\n      $state: rtl.m_loading,\n      $intfcode: intfcode,\n      $implcode: implcode,\n      $impl: null,\n      $rtti: Object.create(rtl.tSectionRTTI)\n    };\n    module.$rtti.$module = module;\n    if (implcode) module.$impl = {\n      $module: module,\n      $rtti: module.$rtti\n    };\n  },\n\n  exitcode: 0,\n\n  run: function(module_name){\n  \n    function doRun(){\n      if (!rtl.hasString(module_name)) module_name='program';\n      if (rtl.debug_load_units) rtl.debug('rtl.run module=\"'+module_name+'\"');\n      rtl.initRTTI();\n      var module = pas[module_name];\n      if (!module) rtl.error('rtl.run module \"'+module_name+'\" missing');\n      rtl.loadintf(module);\n      rtl.loadimpl(module);\n      if (module_name=='program'){\n        if (rtl.debug_load_units) rtl.debug('running $main');\n        var r = pas.program.$main();\n        if (rtl.isNumber(r)) rtl.exitcode = r;\n      }\n    }\n    \n    if (rtl.showUncaughtExceptions) {\n      try{\n        doRun();\n      } catch(re) {\n        var errMsg = rtl.hasString(re.$classname) ? re.$classname : '';\n\t    errMsg +=  ((errMsg) ? ': ' : '') + (re.hasOwnProperty('fMessage') ? re.fMessage : re);\n        alert('Uncaught Exception : '+errMsg);\n        rtl.exitCode = 216;\n      }\n    } else {\n      doRun();\n    }\n    return rtl.exitcode;\n  },\n\n  loadintf: function(module){\n    if (module.$state>rtl.m_loading_intf) return; // already finished\n    if (rtl.debug_load_units) rtl.debug('loadintf: \"'+module.$name+'\"');\n    if (module.$state===rtl.m_loading_intf)\n      rtl.error('unit cycle detected \"'+module.$name+'\"');\n    module.$state=rtl.m_loading_intf;\n    // load interfaces of interface useslist\n    rtl.loaduseslist(module,module.$intfuseslist,rtl.loadintf);\n    // run interface\n    if (rtl.debug_load_units) rtl.debug('loadintf: run intf of \"'+module.$name+'\"');\n    module.$intfcode(module.$intfuseslist);\n    // success\n    module.$state=rtl.m_intf_loaded;\n    // Note: units only used in implementations are not yet loaded (not even their interfaces)\n  },\n\n  loaduseslist: function(module,useslist,f){\n    if (useslist==undefined) return;\n    for (var i in useslist){\n      var unitname=useslist[i];\n      if (rtl.debug_load_units) rtl.debug('loaduseslist of \"'+module.$name+'\" uses=\"'+unitname+'\"');\n      if (pas[unitname]==undefined)\n        rtl.error('module \"'+module.$name+'\" misses \"'+unitname+'\"');\n      f(pas[unitname]);\n    }\n  },\n\n  loadimpl: function(module){\n    if (module.$state>=rtl.m_loading_impl) return; // already processing\n    if (module.$state<rtl.m_intf_loaded) rtl.error('loadimpl: interface not loaded of \"'+module.$name+'\"');\n    if (rtl.debug_load_units) rtl.debug('loadimpl: load uses of \"'+module.$name+'\"');\n    module.$state=rtl.m_loading_impl;\n    // load interfaces of implementation useslist\n    rtl.loaduseslist(module,module.$impluseslist,rtl.loadintf);\n    // load implementation of interfaces useslist\n    rtl.loaduseslist(module,module.$intfuseslist,rtl.loadimpl);\n    // load implementation of implementation useslist\n    rtl.loaduseslist(module,module.$impluseslist,rtl.loadimpl);\n    // Note: At this point all interfaces used by this unit are loaded. If\n    //   there are implementation uses cycles some used units might not yet be\n    //   initialized. This is by design.\n    // run implementation\n    if (rtl.debug_load_units) rtl.debug('loadimpl: run impl of \"'+module.$name+'\"');\n    if (rtl.isFunction(module.$implcode)) module.$implcode(module.$impluseslist);\n    // run initialization\n    if (rtl.debug_load_units) rtl.debug('loadimpl: run init of \"'+module.$name+'\"');\n    module.$state=rtl.m_initializing;\n    if (rtl.isFunction(module.$init)) module.$init();\n    // unit initialized\n    module.$state=rtl.m_initialized;\n  },\n\n  createCallback: function(scope, fn){\n    var cb;\n    if (typeof(fn)==='string'){\n      cb = function(){\n        return scope[fn].apply(scope,arguments);\n      };\n    } else {\n      cb = function(){\n        return fn.apply(scope,arguments);\n      };\n    };\n    cb.scope = scope;\n    cb.fn = fn;\n    return cb;\n  },\n\n  cloneCallback: function(cb){\n    return rtl.createCallback(cb.scope,cb.fn);\n  },\n\n  eqCallback: function(a,b){\n    // can be a function or a function wrapper\n    if (a==b){\n      return true;\n    } else {\n      return (a!=null) && (b!=null) && (a.fn) && (a.scope===b.scope) && (a.fn==b.fn);\n    }\n  },\n\n  initStruct: function(c,parent,name){\n    if ((parent.$module) && (parent.$module.$impl===parent)) parent=parent.$module;\n    c.$parent = parent;\n    if (rtl.isModule(parent)){\n      c.$module = parent;\n      c.$name = name;\n    } else {\n      c.$module = parent.$module;\n      c.$name = parent.$name+'.'+name;\n    };\n    return parent;\n  },\n\n  initClass: function(c,parent,name,initfn){\n    parent[name] = c;\n    c.$class = c; // Note: o.$class === Object.getPrototypeOf(o)\n    c.$classname = name;\n    parent = rtl.initStruct(c,parent,name);\n    c.$fullname = parent.$name+'.'+name;\n    // rtti\n    if (rtl.debug_rtti) rtl.debug('initClass '+c.$fullname);\n    var t = c.$module.$rtti.$Class(c.$name,{ \"class\": c });\n    c.$rtti = t;\n    if (rtl.isObject(c.$ancestor)) t.ancestor = c.$ancestor.$rtti;\n    if (!t.ancestor) t.ancestor = null;\n    // init members\n    initfn.call(c);\n  },\n\n  createClass: function(parent,name,ancestor,initfn){\n    // create a normal class,\n    // ancestor must be null or a normal class,\n    // the root ancestor can be an external class\n    var c = null;\n    if (ancestor != null){\n      c = Object.create(ancestor);\n      c.$ancestor = ancestor;\n      // Note:\n      // if root is an \"object\" then c.$ancestor === Object.getPrototypeOf(c)\n      // if root is a \"function\" then c.$ancestor === c.__proto__, Object.getPrototypeOf(c) returns the root\n    } else {\n      c = {};\n      c.$create = function(fn,args){\n        if (args == undefined) args = [];\n        var o = Object.create(this);\n        o.$init();\n        try{\n          if (typeof(fn)===\"string\"){\n            o[fn].apply(o,args);\n          } else {\n            fn.apply(o,args);\n          };\n          o.AfterConstruction();\n        } catch($e){\n          // do not call BeforeDestruction\n          if (o.Destroy) o.Destroy();\n          o.$final();\n          throw $e;\n        }\n        return o;\n      };\n      c.$destroy = function(fnname){\n        this.BeforeDestruction();\n        if (this[fnname]) this[fnname]();\n        this.$final();\n      };\n    };\n    rtl.initClass(c,parent,name,initfn);\n  },\n\n  createClassExt: function(parent,name,ancestor,newinstancefnname,initfn){\n    // Create a class using an external ancestor.\n    // If newinstancefnname is given, use that function to create the new object.\n    // If exist call BeforeDestruction and AfterConstruction.\n    var c = Object.create(ancestor);\n    c.$create = function(fn,args){\n      if (args == undefined) args = [];\n      var o = null;\n      if (newinstancefnname.length>0){\n        o = this[newinstancefnname](fn,args);\n      } else {\n        o = Object.create(this);\n      }\n      if (o.$init) o.$init();\n      try{\n        if (typeof(fn)===\"string\"){\n          o[fn].apply(o,args);\n        } else {\n          fn.apply(o,args);\n        };\n        if (o.AfterConstruction) o.AfterConstruction();\n      } catch($e){\n        // do not call BeforeDestruction\n        if (o.Destroy) o.Destroy();\n        if (o.$final) this.$final();\n        throw $e;\n      }\n      return o;\n    };\n    c.$destroy = function(fnname){\n      if (this.BeforeDestruction) this.BeforeDestruction();\n      if (this[fnname]) this[fnname]();\n      if (this.$final) this.$final();\n    };\n    rtl.initClass(c,parent,name,initfn);\n  },\n\n  createHelper: function(parent,name,ancestor,initfn){\n    // create a helper,\n    // ancestor must be null or a helper,\n    var c = null;\n    if (ancestor != null){\n      c = Object.create(ancestor);\n      c.$ancestor = ancestor;\n      // c.$ancestor === Object.getPrototypeOf(c)\n    } else {\n      c = {};\n    };\n    parent[name] = c;\n    c.$class = c; // Note: o.$class === Object.getPrototypeOf(o)\n    c.$classname = name;\n    parent = rtl.initStruct(c,parent,name);\n    c.$fullname = parent.$name+'.'+name;\n    // rtti\n    var t = c.$module.$rtti.$Helper(c.$name,{ \"helper\": c });\n    c.$rtti = t;\n    if (rtl.isObject(ancestor)) t.ancestor = ancestor.$rtti;\n    if (!t.ancestor) t.ancestor = null;\n    // init members\n    initfn.call(c);\n  },\n\n  tObjectDestroy: \"Destroy\",\n\n  free: function(obj,name){\n    if (obj[name]==null) return;\n    obj[name].$destroy(rtl.tObjectDestroy);\n    obj[name]=null;\n  },\n\n  freeLoc: function(obj){\n    if (obj==null) return;\n    obj.$destroy(rtl.tObjectDestroy);\n    return null;\n  },\n\n  recNewT: function(parent,name,initfn,full){\n    // create new record type\n    var t = {};\n    if (parent) parent[name] = t;\n    function hide(prop){\n      Object.defineProperty(t,prop,{enumerable:false});\n    }\n    if (full){\n      rtl.initStruct(t,parent,name);\n      t.$record = t;\n      hide('$record');\n      hide('$name');\n      hide('$parent');\n      hide('$module');\n    }\n    initfn.call(t);\n    if (!t.$new){\n      t.$new = function(){ return Object.create(this); };\n    }\n    t.$clone = function(r){ return this.$new().$assign(r); };\n    hide('$new');\n    hide('$clone');\n    hide('$eq');\n    hide('$assign');\n    return t;\n  },\n\n  is: function(instance,type){\n    return type.isPrototypeOf(instance) || (instance===type);\n  },\n\n  isExt: function(instance,type,mode){\n    // mode===1 means instance must be a Pascal class instance\n    // mode===2 means instance must be a Pascal class\n    // Notes:\n    // isPrototypeOf and instanceof return false on equal\n    // isPrototypeOf does not work for Date.isPrototypeOf(new Date())\n    //   so if isPrototypeOf is false test with instanceof\n    // instanceof needs a function on right side\n    if (instance == null) return false; // Note: ==null checks for undefined too\n    if ((typeof(type) !== 'object') && (typeof(type) !== 'function')) return false;\n    if (instance === type){\n      if (mode===1) return false;\n      if (mode===2) return rtl.isPasClass(instance);\n      return true;\n    }\n    if (type.isPrototypeOf && type.isPrototypeOf(instance)){\n      if (mode===1) return rtl.isPasClassInstance(instance);\n      if (mode===2) return rtl.isPasClass(instance);\n      return true;\n    }\n    if ((typeof type == 'function') && (instance instanceof type)) return true;\n    return false;\n  },\n\n  Exception: null,\n  EInvalidCast: null,\n  EAbstractError: null,\n  ERangeError: null,\n  EPropWriteOnly: null,\n\n  raiseE: function(typename){\n    var t = rtl[typename];\n    if (t==null){\n      var mod = pas.SysUtils;\n      if (!mod) mod = pas.sysutils;\n      if (mod){\n        t = mod[typename];\n        if (!t) t = mod[typename.toLowerCase()];\n        if (!t) t = mod['Exception'];\n        if (!t) t = mod['exception'];\n      }\n    }\n    if (t){\n      if (t.Create){\n        throw t.$create(\"Create\");\n      } else if (t.create){\n        throw t.$create(\"create\");\n      }\n    }\n    if (typename === \"EInvalidCast\") throw \"invalid type cast\";\n    if (typename === \"EAbstractError\") throw \"Abstract method called\";\n    if (typename === \"ERangeError\") throw \"range error\";\n    throw typename;\n  },\n\n  as: function(instance,type){\n    if((instance === null) || rtl.is(instance,type)) return instance;\n    rtl.raiseE(\"EInvalidCast\");\n  },\n\n  asExt: function(instance,type,mode){\n    if((instance === null) || rtl.isExt(instance,type,mode)) return instance;\n    rtl.raiseE(\"EInvalidCast\");\n  },\n\n  createInterface: function(module, name, guid, fnnames, ancestor, initfn){\n    //console.log('createInterface name=\"'+name+'\" guid=\"'+guid+'\" names='+fnnames);\n    var i = ancestor?Object.create(ancestor):{};\n    module[name] = i;\n    i.$module = module;\n    i.$name = name;\n    i.$fullname = module.$name+'.'+name;\n    i.$guid = guid;\n    i.$guidr = null;\n    i.$names = fnnames?fnnames:[];\n    if (rtl.isFunction(initfn)){\n      // rtti\n      if (rtl.debug_rtti) rtl.debug('createInterface '+i.$fullname);\n      var t = i.$module.$rtti.$Interface(name,{ \"interface\": i, module: module });\n      i.$rtti = t;\n      if (ancestor) t.ancestor = ancestor.$rtti;\n      if (!t.ancestor) t.ancestor = null;\n      initfn.call(i);\n    }\n    return i;\n  },\n\n  strToGUIDR: function(s,g){\n    var p = 0;\n    function n(l){\n      var h = s.substr(p,l);\n      p+=l;\n      return parseInt(h,16);\n    }\n    p+=1; // skip {\n    g.D1 = n(8);\n    p+=1; // skip -\n    g.D2 = n(4);\n    p+=1; // skip -\n    g.D3 = n(4);\n    p+=1; // skip -\n    if (!g.D4) g.D4=[];\n    g.D4[0] = n(2);\n    g.D4[1] = n(2);\n    p+=1; // skip -\n    for(var i=2; i<8; i++) g.D4[i] = n(2);\n    return g;\n  },\n\n  guidrToStr: function(g){\n    if (g.$intf) return g.$intf.$guid;\n    var h = rtl.hexStr;\n    var s='{'+h(g.D1,8)+'-'+h(g.D2,4)+'-'+h(g.D3,4)+'-'+h(g.D4[0],2)+h(g.D4[1],2)+'-';\n    for (var i=2; i<8; i++) s+=h(g.D4[i],2);\n    s+='}';\n    return s;\n  },\n\n  createTGUID: function(guid){\n    var TGuid = (pas.System)?pas.System.TGuid:pas.system.tguid;\n    var g = rtl.strToGUIDR(guid,TGuid.$new());\n    return g;\n  },\n\n  getIntfGUIDR: function(intfTypeOrVar){\n    if (!intfTypeOrVar) return null;\n    if (!intfTypeOrVar.$guidr){\n      var g = rtl.createTGUID(intfTypeOrVar.$guid);\n      if (!intfTypeOrVar.hasOwnProperty('$guid')) intfTypeOrVar = Object.getPrototypeOf(intfTypeOrVar);\n      g.$intf = intfTypeOrVar;\n      intfTypeOrVar.$guidr = g;\n    }\n    return intfTypeOrVar.$guidr;\n  },\n\n  addIntf: function (aclass, intf, map){\n    function jmp(fn){\n      if (typeof(fn)===\"function\"){\n        return function(){ return fn.apply(this.$o,arguments); };\n      } else {\n        return function(){ rtl.raiseE('EAbstractError'); };\n      }\n    }\n    if(!map) map = {};\n    var t = intf;\n    var item = Object.create(t);\n    if (!aclass.hasOwnProperty('$intfmaps')) aclass.$intfmaps = {};\n    aclass.$intfmaps[intf.$guid] = item;\n    do{\n      var names = t.$names;\n      if (!names) break;\n      for (var i=0; i<names.length; i++){\n        var intfname = names[i];\n        var fnname = map[intfname];\n        if (!fnname) fnname = intfname;\n        //console.log('addIntf: intftype='+t.$name+' index='+i+' intfname=\"'+intfname+'\" fnname=\"'+fnname+'\" old='+typeof(item[intfname]));\n        item[intfname] = jmp(aclass[fnname]);\n      }\n      t = Object.getPrototypeOf(t);\n    }while(t!=null);\n  },\n\n  getIntfG: function (obj, guid, query){\n    if (!obj) return null;\n    //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' query='+query);\n    // search\n    var maps = obj.$intfmaps;\n    if (!maps) return null;\n    var item = maps[guid];\n    if (!item) return null;\n    // check delegation\n    //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' query='+query+' item='+typeof(item));\n    if (typeof item === 'function') return item.call(obj); // delegate. Note: COM contains _AddRef\n    // check cache\n    var intf = null;\n    if (obj.$interfaces){\n      intf = obj.$interfaces[guid];\n      //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' cache='+typeof(intf));\n    }\n    if (!intf){ // intf can be undefined!\n      intf = Object.create(item);\n      intf.$o = obj;\n      if (!obj.$interfaces) obj.$interfaces = {};\n      obj.$interfaces[guid] = intf;\n    }\n    if (typeof(query)==='object'){\n      // called by queryIntfT\n      var o = null;\n      if (intf.QueryInterface(rtl.getIntfGUIDR(query),\n          {get:function(){ return o; }, set:function(v){ o=v; }}) === 0){\n        return o;\n      } else {\n        return null;\n      }\n    } else if(query===2){\n      // called by TObject.GetInterfaceByStr\n      if (intf.$kind === 'com') intf._AddRef();\n    }\n    return intf;\n  },\n\n  getIntfT: function(obj,intftype){\n    return rtl.getIntfG(obj,intftype.$guid);\n  },\n\n  queryIntfT: function(obj,intftype){\n    return rtl.getIntfG(obj,intftype.$guid,intftype);\n  },\n\n  queryIntfIsT: function(obj,intftype){\n    var i = rtl.queryIntfG(obj,intftype.$guid);\n    if (!i) return false;\n    if (i.$kind === 'com') i._Release();\n    return true;\n  },\n\n  asIntfT: function (obj,intftype){\n    var i = rtl.getIntfG(obj,intftype.$guid);\n    if (i!==null) return i;\n    rtl.raiseEInvalidCast();\n  },\n\n  intfIsClass: function(intf,classtype){\n    return (intf!=null) && (rtl.is(intf.$o,classtype));\n  },\n\n  intfAsClass: function(intf,classtype){\n    if (intf==null) return null;\n    return rtl.as(intf.$o,classtype);\n  },\n\n  intfToClass: function(intf,classtype){\n    if ((intf!==null) && rtl.is(intf.$o,classtype)) return intf.$o;\n    return null;\n  },\n\n  // interface reference counting\n  intfRefs: { // base object for temporary interface variables\n    ref: function(id,intf){\n      // called for temporary interface references needing delayed release\n      var old = this[id];\n      //console.log('rtl.intfRefs.ref: id='+id+' old=\"'+(old?old.$name:'null')+'\" intf=\"'+(intf?intf.$name:'null')+' $o='+(intf?intf.$o:'null'));\n      if (old){\n        // called again, e.g. in a loop\n        delete this[id];\n        old._Release(); // may fail\n      }\n      this[id]=intf;\n      return intf;\n    },\n    free: function(){\n      //console.log('rtl.intfRefs.free...');\n      for (var id in this){\n        if (this.hasOwnProperty(id)){\n          //console.log('rtl.intfRefs.free: id='+id+' '+this[id].$name+' $o='+this[id].$o.$classname);\n          this[id]._Release();\n        }\n      }\n    }\n  },\n\n  createIntfRefs: function(){\n    //console.log('rtl.createIntfRefs');\n    return Object.create(rtl.intfRefs);\n  },\n\n  setIntfP: function(path,name,value,skipAddRef){\n    var old = path[name];\n    //console.log('rtl.setIntfP path='+path+' name='+name+' old=\"'+(old?old.$name:'null')+'\" value=\"'+(value?value.$name:'null')+'\"');\n    if (old === value) return;\n    if (old !== null){\n      path[name]=null;\n      old._Release();\n    }\n    if (value !== null){\n      if (!skipAddRef) value._AddRef();\n      path[name]=value;\n    }\n  },\n\n  setIntfL: function(old,value,skipAddRef){\n    //console.log('rtl.setIntfL old=\"'+(old?old.$name:'null')+'\" value=\"'+(value?value.$name:'null')+'\"');\n    if (old !== value){\n      if (value!==null){\n        if (!skipAddRef) value._AddRef();\n      }\n      if (old!==null){\n        old._Release();  // Release after AddRef, to avoid double Release if Release creates an exception\n      }\n    } else if (skipAddRef){\n      if (old!==null){\n        old._Release();  // value has an AddRef\n      }\n    }\n    return value;\n  },\n\n  _AddRef: function(intf){\n    //if (intf) console.log('rtl._AddRef intf=\"'+(intf?intf.$name:'null')+'\"');\n    if (intf) intf._AddRef();\n    return intf;\n  },\n\n  _Release: function(intf){\n    //if (intf) console.log('rtl._Release intf=\"'+(intf?intf.$name:'null')+'\"');\n    if (intf) intf._Release();\n    return intf;\n  },\n\n  checkMethodCall: function(obj,type){\n    if (rtl.isObject(obj) && rtl.is(obj,type)) return;\n    rtl.raiseE(\"EInvalidCast\");\n  },\n\n  rc: function(i,minval,maxval){\n    // range check integer\n    if ((Math.floor(i)===i) && (i>=minval) && (i<=maxval)) return i;\n    rtl.raiseE('ERangeError');\n  },\n\n  rcc: function(c,minval,maxval){\n    // range check char\n    if ((typeof(c)==='string') && (c.length===1)){\n      var i = c.charCodeAt(0);\n      if ((i>=minval) && (i<=maxval)) return c;\n    }\n    rtl.raiseE('ERangeError');\n  },\n\n  rcSetCharAt: function(s,index,c){\n    // range check setCharAt\n    if ((typeof(s)!=='string') || (index<0) || (index>=s.length)) rtl.raiseE('ERangeError');\n    return rtl.setCharAt(s,index,c);\n  },\n\n  rcCharAt: function(s,index){\n    // range check charAt\n    if ((typeof(s)!=='string') || (index<0) || (index>=s.length)) rtl.raiseE('ERangeError');\n    return s.charAt(index);\n  },\n\n  rcArrR: function(arr,index){\n    // range check read array\n    if (Array.isArray(arr) && (typeof(index)==='number') && (index>=0) && (index<arr.length)){\n      if (arguments.length>2){\n        // arr,index1,index2,...\n        arr=arr[index];\n        for (var i=2; i<arguments.length; i++) arr=rtl.rcArrR(arr,arguments[i]);\n        return arr;\n      }\n      return arr[index];\n    }\n    rtl.raiseE('ERangeError');\n  },\n\n  rcArrW: function(arr,index,value){\n    // range check write array\n    // arr,index1,index2,...,value\n    for (var i=3; i<arguments.length; i++){\n      arr=rtl.rcArrR(arr,index);\n      index=arguments[i-1];\n      value=arguments[i];\n    }\n    if (Array.isArray(arr) && (typeof(index)==='number') && (index>=0) && (index<arr.length)){\n      return arr[index]=value;\n    }\n    rtl.raiseE('ERangeError');\n  },\n\n  length: function(arr){\n    return (arr == null) ? 0 : arr.length;\n  },\n\n  arraySetLength: function(arr,defaultvalue,newlength){\n    // multi dim: (arr,defaultvalue,dim1,dim2,...)\n    var p = arguments;\n    function setLength(src,argNo){\n      var newlen = p[argNo];\n      var a = [];\n      a.length = newlength;\n      if (argNo === p.length-1){\n        var oldlen = src?src.length:0;\n        if (rtl.isArray(defaultvalue)){\n          for (var i=0; i<newlen; i++) a[i]=(i<oldlen)?src[i]:[]; // array of dyn array\n        } else if (rtl.isObject(defaultvalue)) {\n          if (rtl.isTRecord(defaultvalue)){\n            for (var i=0; i<newlen; i++)\n              a[i]=(i<oldlen)?defaultvalue.$clone(src[i]):defaultvalue.$new(); // e.g. record\n          } else {\n            for (var i=0; i<newlen; i++) a[i]=(i<oldlen)?rtl.refSet(src[i]):{}; // e.g. set\n          }\n        } else {\n          for (var i=0; i<newlen; i++)\n            a[i]=(i<oldlen)?src[i]:defaultvalue;\n        }\n      } else {\n        // multi dim array\n        for (var i=0; i<newlen; i++) a[i]=setLength(src?src[i]:null,argNo+1);\n      }\n      return a;\n    }\n    return setLength(arr,2);\n  },\n\n  /*arrayChgLength: function(arr,defaultvalue,newlength){\n    // multi dim: (arr,defaultvalue,dim1,dim2,...)\n    if (arr == null) arr = [];\n    var p = arguments;\n    function setLength(a,argNo){\n      var oldlen = a.length;\n      var newlen = p[argNo];\n      if (oldlen!==newlength){\n        a.length = newlength;\n        if (argNo === p.length-1){\n          if (rtl.isArray(defaultvalue)){\n            for (var i=oldlen; i<newlen; i++) a[i]=[]; // nested array\n          } else if (rtl.isObject(defaultvalue)) {\n            if (rtl.isTRecord(defaultvalue)){\n              for (var i=oldlen; i<newlen; i++) a[i]=defaultvalue.$new(); // e.g. record\n            } else {\n              for (var i=oldlen; i<newlen; i++) a[i]={}; // e.g. set\n            }\n          } else {\n            for (var i=oldlen; i<newlen; i++) a[i]=defaultvalue;\n          }\n        } else {\n          for (var i=oldlen; i<newlen; i++) a[i]=[]; // nested array\n        }\n      }\n      if (argNo < p.length-1){\n        // multi argNo\n        for (var i=0; i<newlen; i++) a[i]=setLength(a[i],argNo+1);\n      }\n      return a;\n    }\n    return setLength(arr,2);\n  },*/\n\n  arrayEq: function(a,b){\n    if (a===null) return b===null;\n    if (b===null) return false;\n    if (a.length!==b.length) return false;\n    for (var i=0; i<a.length; i++) if (a[i]!==b[i]) return false;\n    return true;\n  },\n\n  arrayClone: function(type,src,srcpos,endpos,dst,dstpos){\n    // type: 0 for references, \"refset\" for calling refSet(), a function for new type()\n    // src must not be null\n    // This function does not range check.\n    if(type === 'refSet') {\n      for (; srcpos<endpos; srcpos++) dst[dstpos++] = rtl.refSet(src[srcpos]); // ref set\n    } else if (rtl.isTRecord(type)){\n      for (; srcpos<endpos; srcpos++) dst[dstpos++] = type.$clone(src[srcpos]); // clone record\n    }  else {\n      for (; srcpos<endpos; srcpos++) dst[dstpos++] = src[srcpos]; // reference\n    };\n  },\n\n  arrayConcat: function(type){\n    // type: see rtl.arrayClone\n    var a = [];\n    var l = 0;\n    for (var i=1; i<arguments.length; i++){\n      var src = arguments[i];\n      if (src !== null) l+=src.length;\n    };\n    a.length = l;\n    l=0;\n    for (var i=1; i<arguments.length; i++){\n      var src = arguments[i];\n      if (src === null) continue;\n      rtl.arrayClone(type,src,0,src.length,a,l);\n      l+=src.length;\n    };\n    return a;\n  },\n\n  arrayConcatN: function(){\n    var a = null;\n    for (var i=1; i<arguments.length; i++){\n      var src = arguments[i];\n      if (src === null) continue;\n      if (a===null){\n        a=src; // Note: concat(a) does not clone\n      } else {\n        a=a.concat(src);\n      }\n    };\n    return a;\n  },\n\n  arrayCopy: function(type, srcarray, index, count){\n    // type: see rtl.arrayClone\n    // if count is missing, use srcarray.length\n    if (srcarray === null) return [];\n    if (index < 0) index = 0;\n    if (count === undefined) count=srcarray.length;\n    var end = index+count;\n    if (end>srcarray.length) end = srcarray.length;\n    if (index>=end) return [];\n    if (type===0){\n      return srcarray.slice(index,end);\n    } else {\n      var a = [];\n      a.length = end-index;\n      rtl.arrayClone(type,srcarray,index,end,a,0);\n      return a;\n    }\n  },\n\n  setCharAt: function(s,index,c){\n    return s.substr(0,index)+c+s.substr(index+1);\n  },\n\n  getResStr: function(mod,name){\n    var rs = mod.$resourcestrings[name];\n    return rs.current?rs.current:rs.org;\n  },\n\n  createSet: function(){\n    var s = {};\n    for (var i=0; i<arguments.length; i++){\n      if (arguments[i]!=null){\n        s[arguments[i]]=true;\n      } else {\n        var first=arguments[i+=1];\n        var last=arguments[i+=1];\n        for(var j=first; j<=last; j++) s[j]=true;\n      }\n    }\n    return s;\n  },\n\n  cloneSet: function(s){\n    var r = {};\n    for (var key in s) r[key]=true;\n    return r;\n  },\n\n  refSet: function(s){\n    Object.defineProperty(s, '$shared', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    return s;\n  },\n\n  includeSet: function(s,enumvalue){\n    if (s.$shared) s = rtl.cloneSet(s);\n    s[enumvalue] = true;\n    return s;\n  },\n\n  excludeSet: function(s,enumvalue){\n    if (s.$shared) s = rtl.cloneSet(s);\n    delete s[enumvalue];\n    return s;\n  },\n\n  diffSet: function(s,t){\n    var r = {};\n    for (var key in s) if (!t[key]) r[key]=true;\n    return r;\n  },\n\n  unionSet: function(s,t){\n    var r = {};\n    for (var key in s) r[key]=true;\n    for (var key in t) r[key]=true;\n    return r;\n  },\n\n  intersectSet: function(s,t){\n    var r = {};\n    for (var key in s) if (t[key]) r[key]=true;\n    return r;\n  },\n\n  symDiffSet: function(s,t){\n    var r = {};\n    for (var key in s) if (!t[key]) r[key]=true;\n    for (var key in t) if (!s[key]) r[key]=true;\n    return r;\n  },\n\n  eqSet: function(s,t){\n    for (var key in s) if (!t[key]) return false;\n    for (var key in t) if (!s[key]) return false;\n    return true;\n  },\n\n  neSet: function(s,t){\n    return !rtl.eqSet(s,t);\n  },\n\n  leSet: function(s,t){\n    for (var key in s) if (!t[key]) return false;\n    return true;\n  },\n\n  geSet: function(s,t){\n    for (var key in t) if (!s[key]) return false;\n    return true;\n  },\n\n  strSetLength: function(s,newlen){\n    var oldlen = s.length;\n    if (oldlen > newlen){\n      return s.substring(0,newlen);\n    } else if (s.repeat){\n      // Note: repeat needs ECMAScript6!\n      return s+' '.repeat(newlen-oldlen);\n    } else {\n       while (oldlen<newlen){\n         s+=' ';\n         oldlen++;\n       };\n       return s;\n    }\n  },\n\n  spaceLeft: function(s,width){\n    var l=s.length;\n    if (l>=width) return s;\n    if (s.repeat){\n      // Note: repeat needs ECMAScript6!\n      return ' '.repeat(width-l) + s;\n    } else {\n      while (l<width){\n        s=' '+s;\n        l++;\n      };\n    };\n  },\n\n  floatToStr: function(d,w,p){\n    // input 1-3 arguments: double, width, precision\n    if (arguments.length>2){\n      return rtl.spaceLeft(d.toFixed(p),w);\n    } else {\n\t  // exponent width\n\t  var pad = \"\";\n\t  var ad = Math.abs(d);\n\t  if (ad<1.0e+10) {\n\t\tpad='00';\n\t  } else if (ad<1.0e+100) {\n\t\tpad='0';\n      }  \t\n\t  if (arguments.length<2) {\n\t    w=9;\t\t\n      } else if (w<9) {\n\t\tw=9;\n      }\t\t  \n      var p = w-8;\n      var s=(d>0 ? \" \" : \"\" ) + d.toExponential(p);\n      s=s.replace(/e(.)/,'E$1'+pad);\n      return rtl.spaceLeft(s,w);\n    }\n  },\n\n  valEnum: function(s, enumType, setCodeFn){\n    s = s.toLowerCase();\n    for (var key in enumType){\n      if((typeof(key)==='string') && (key.toLowerCase()===s)){\n        setCodeFn(0);\n        return enumType[key];\n      }\n    }\n    setCodeFn(1);\n    return 0;\n  },\n\n  and: function(a,b){\n    var hi = 0x80000000;\n    var low = 0x7fffffff;\n    var h = (a / hi) & (b / hi);\n    var l = (a & low) & (b & low);\n    return h*hi + l;\n  },\n\n  or: function(a,b){\n    var hi = 0x80000000;\n    var low = 0x7fffffff;\n    var h = (a / hi) | (b / hi);\n    var l = (a & low) | (b & low);\n    return h*hi + l;\n  },\n\n  xor: function(a,b){\n    var hi = 0x80000000;\n    var low = 0x7fffffff;\n    var h = (a / hi) ^ (b / hi);\n    var l = (a & low) ^ (b & low);\n    return h*hi + l;\n  },\n\n  shr: function(a,b){\n    if (a<0) a += rtl.hiInt;\n    if (a<0x80000000) return a >> b;\n    if (b<=0) return a;\n    if (b>54) return 0;\n    return Math.floor(a / Math.pow(2,b));\n  },\n\n  shl: function(a,b){\n    if (a<0) a += rtl.hiInt;\n    if (b<=0) return a;\n    if (b>54) return 0;\n    var r = a * Math.pow(2,b);\n    if (r <= rtl.hiInt) return r;\n    return r % rtl.hiInt;\n  },\n\n  initRTTI: function(){\n    if (rtl.debug_rtti) rtl.debug('initRTTI');\n\n    // base types\n    rtl.tTypeInfo = { name: \"tTypeInfo\" };\n    function newBaseTI(name,kind,ancestor){\n      if (!ancestor) ancestor = rtl.tTypeInfo;\n      if (rtl.debug_rtti) rtl.debug('initRTTI.newBaseTI \"'+name+'\" '+kind+' (\"'+ancestor.name+'\")');\n      var t = Object.create(ancestor);\n      t.name = name;\n      t.kind = kind;\n      rtl[name] = t;\n      return t;\n    };\n    function newBaseInt(name,minvalue,maxvalue,ordtype){\n      var t = newBaseTI(name,1 /* tkInteger */,rtl.tTypeInfoInteger);\n      t.minvalue = minvalue;\n      t.maxvalue = maxvalue;\n      t.ordtype = ordtype;\n      return t;\n    };\n    newBaseTI(\"tTypeInfoInteger\",1 /* tkInteger */);\n    newBaseInt(\"shortint\",-0x80,0x7f,0);\n    newBaseInt(\"byte\",0,0xff,1);\n    newBaseInt(\"smallint\",-0x8000,0x7fff,2);\n    newBaseInt(\"word\",0,0xffff,3);\n    newBaseInt(\"longint\",-0x80000000,0x7fffffff,4);\n    newBaseInt(\"longword\",0,0xffffffff,5);\n    newBaseInt(\"nativeint\",-0x10000000000000,0xfffffffffffff,6);\n    newBaseInt(\"nativeuint\",0,0xfffffffffffff,7);\n    newBaseTI(\"char\",2 /* tkChar */);\n    newBaseTI(\"string\",3 /* tkString */);\n    newBaseTI(\"tTypeInfoEnum\",4 /* tkEnumeration */,rtl.tTypeInfoInteger);\n    newBaseTI(\"tTypeInfoSet\",5 /* tkSet */);\n    newBaseTI(\"double\",6 /* tkDouble */);\n    newBaseTI(\"boolean\",7 /* tkBool */);\n    newBaseTI(\"tTypeInfoProcVar\",8 /* tkProcVar */);\n    newBaseTI(\"tTypeInfoMethodVar\",9 /* tkMethod */,rtl.tTypeInfoProcVar);\n    newBaseTI(\"tTypeInfoArray\",10 /* tkArray */);\n    newBaseTI(\"tTypeInfoDynArray\",11 /* tkDynArray */);\n    newBaseTI(\"tTypeInfoPointer\",15 /* tkPointer */);\n    var t = newBaseTI(\"pointer\",15 /* tkPointer */,rtl.tTypeInfoPointer);\n    t.reftype = null;\n    newBaseTI(\"jsvalue\",16 /* tkJSValue */);\n    newBaseTI(\"tTypeInfoRefToProcVar\",17 /* tkRefToProcVar */,rtl.tTypeInfoProcVar);\n\n    // member kinds\n    rtl.tTypeMember = {};\n    function newMember(name,kind){\n      var m = Object.create(rtl.tTypeMember);\n      m.name = name;\n      m.kind = kind;\n      rtl[name] = m;\n    };\n    newMember(\"tTypeMemberField\",1); // tmkField\n    newMember(\"tTypeMemberMethod\",2); // tmkMethod\n    newMember(\"tTypeMemberProperty\",3); // tmkProperty\n\n    // base object for storing members: a simple object\n    rtl.tTypeMembers = {};\n\n    // tTypeInfoStruct - base object for tTypeInfoClass, tTypeInfoRecord, tTypeInfoInterface\n    var tis = newBaseTI(\"tTypeInfoStruct\",0);\n    tis.$addMember = function(name,ancestor,options){\n      if (rtl.debug_rtti){\n        if (!rtl.hasString(name) || (name.charAt()==='$')) throw 'invalid member \"'+name+'\", this=\"'+this.name+'\"';\n        if (!rtl.is(ancestor,rtl.tTypeMember)) throw 'invalid ancestor \"'+ancestor+':'+ancestor.name+'\", \"'+this.name+'.'+name+'\"';\n        if ((options!=undefined) && (typeof(options)!='object')) throw 'invalid options \"'+options+'\", \"'+this.name+'.'+name+'\"';\n      };\n      var t = Object.create(ancestor);\n      t.name = name;\n      this.members[name] = t;\n      this.names.push(name);\n      if (rtl.isObject(options)){\n        for (var key in options) if (options.hasOwnProperty(key)) t[key] = options[key];\n      };\n      return t;\n    };\n    tis.addField = function(name,type,options){\n      var t = this.$addMember(name,rtl.tTypeMemberField,options);\n      if (rtl.debug_rtti){\n        if (!rtl.is(type,rtl.tTypeInfo)) throw 'invalid type \"'+type+'\", \"'+this.name+'.'+name+'\"';\n      };\n      t.typeinfo = type;\n      this.fields.push(name);\n      return t;\n    };\n    tis.addFields = function(){\n      var i=0;\n      while(i<arguments.length){\n        var name = arguments[i++];\n        var type = arguments[i++];\n        if ((i<arguments.length) && (typeof(arguments[i])==='object')){\n          this.addField(name,type,arguments[i++]);\n        } else {\n          this.addField(name,type);\n        };\n      };\n    };\n    tis.addMethod = function(name,methodkind,params,result,options){\n      var t = this.$addMember(name,rtl.tTypeMemberMethod,options);\n      t.methodkind = methodkind;\n      t.procsig = rtl.newTIProcSig(params);\n      t.procsig.resulttype = result?result:null;\n      this.methods.push(name);\n      return t;\n    };\n    tis.addProperty = function(name,flags,result,getter,setter,options){\n      var t = this.$addMember(name,rtl.tTypeMemberProperty,options);\n      t.flags = flags;\n      t.typeinfo = result;\n      t.getter = getter;\n      t.setter = setter;\n      // Note: in options: params, stored, defaultvalue\n      if (rtl.isArray(t.params)) t.params = rtl.newTIParams(t.params);\n      this.properties.push(name);\n      if (!rtl.isString(t.stored)) t.stored = \"\";\n      return t;\n    };\n    tis.getField = function(index){\n      return this.members[this.fields[index]];\n    };\n    tis.getMethod = function(index){\n      return this.members[this.methods[index]];\n    };\n    tis.getProperty = function(index){\n      return this.members[this.properties[index]];\n    };\n\n    newBaseTI(\"tTypeInfoRecord\",12 /* tkRecord */,rtl.tTypeInfoStruct);\n    newBaseTI(\"tTypeInfoClass\",13 /* tkClass */,rtl.tTypeInfoStruct);\n    newBaseTI(\"tTypeInfoClassRef\",14 /* tkClassRef */);\n    newBaseTI(\"tTypeInfoInterface\",18 /* tkInterface */,rtl.tTypeInfoStruct);\n    newBaseTI(\"tTypeInfoHelper\",19 /* tkHelper */,rtl.tTypeInfoStruct);\n  },\n\n  tSectionRTTI: {\n    $module: null,\n    $inherited: function(name,ancestor,o){\n      if (rtl.debug_rtti){\n        rtl.debug('tSectionRTTI.newTI \"'+(this.$module?this.$module.$name:\"(no module)\")\n          +'\".\"'+name+'\" ('+ancestor.name+') '+(o?'init':'forward'));\n      };\n      var t = this[name];\n      if (t){\n        if (!t.$forward) throw 'duplicate type \"'+name+'\"';\n        if (!ancestor.isPrototypeOf(t)) throw 'typeinfo ancestor mismatch \"'+name+'\" ancestor=\"'+ancestor.name+'\" t.name=\"'+t.name+'\"';\n      } else {\n        t = Object.create(ancestor);\n        t.name = name;\n        t.$module = this.$module;\n        this[name] = t;\n      }\n      if (o){\n        delete t.$forward;\n        for (var key in o) if (o.hasOwnProperty(key)) t[key]=o[key];\n      } else {\n        t.$forward = true;\n      }\n      return t;\n    },\n    $Scope: function(name,ancestor,o){\n      var t=this.$inherited(name,ancestor,o);\n      t.members = {};\n      t.names = [];\n      t.fields = [];\n      t.methods = [];\n      t.properties = [];\n      return t;\n    },\n    $TI: function(name,kind,o){ var t=this.$inherited(name,rtl.tTypeInfo,o); t.kind = kind; return t; },\n    $Int: function(name,o){ return this.$inherited(name,rtl.tTypeInfoInteger,o); },\n    $Enum: function(name,o){ return this.$inherited(name,rtl.tTypeInfoEnum,o); },\n    $Set: function(name,o){ return this.$inherited(name,rtl.tTypeInfoSet,o); },\n    $StaticArray: function(name,o){ return this.$inherited(name,rtl.tTypeInfoArray,o); },\n    $DynArray: function(name,o){ return this.$inherited(name,rtl.tTypeInfoDynArray,o); },\n    $ProcVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoProcVar,o); },\n    $RefToProcVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoRefToProcVar,o); },\n    $MethodVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoMethodVar,o); },\n    $Record: function(name,o){ return this.$Scope(name,rtl.tTypeInfoRecord,o); },\n    $Class: function(name,o){ return this.$Scope(name,rtl.tTypeInfoClass,o); },\n    $ClassRef: function(name,o){ return this.$inherited(name,rtl.tTypeInfoClassRef,o); },\n    $Pointer: function(name,o){ return this.$inherited(name,rtl.tTypeInfoPointer,o); },\n    $Interface: function(name,o){ return this.$Scope(name,rtl.tTypeInfoInterface,o); },\n    $Helper: function(name,o){ return this.$Scope(name,rtl.tTypeInfoHelper,o); }\n  },\n\n  newTIParam: function(param){\n    // param is an array, 0=name, 1=type, 2=optional flags\n    var t = {\n      name: param[0],\n      typeinfo: param[1],\n      flags: (rtl.isNumber(param[2]) ? param[2] : 0)\n    };\n    return t;\n  },\n\n  newTIParams: function(list){\n    // list: optional array of [paramname,typeinfo,optional flags]\n    var params = [];\n    if (rtl.isArray(list)){\n      for (var i=0; i<list.length; i++) params.push(rtl.newTIParam(list[i]));\n    };\n    return params;\n  },\n\n  newTIProcSig: function(params,result,flags){\n    var s = {\n      params: rtl.newTIParams(params),\n      resulttype: result,\n      flags: flags\n    };\n    return s;\n  }\n}\n","{\n    This file is part of the Pas2JS run time library.\n    Copyright (c) 2018 by Mattias Gaertner\n\n    See the file COPYING.FPC, included in this distribution,\n    for details about the copyright.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n **********************************************************************}\nunit System;\n\n{$mode objfpc}\n{$modeswitch externalclass}\n\ninterface\n\n{$IFDEF NodeJS}\nvar\n  LineEnding: string = #10;\n  sLineBreak: string = #10;\n{$ELSE}\nconst\n  LineEnding = #10;\n  sLineBreak = LineEnding;\n{$ENDIF}\n\nVar\n  PathDelim : Char = '/';\n  AllowDirectorySeparators : Set of Char = ['/'];\n  AllowDriveSeparators : Set of Char = [':'];\n  ExtensionSeparator : Char = '.';\n\nconst\n  MaxSmallint = 32767;\n  MinSmallint = -32768;\n  MaxShortInt = 127;\n  MinShortInt = -128;\n  MaxByte = $FF;\n  MaxWord = $FFFF;\n  MaxLongint  = $7fffffff;\n  MaxCardinal = LongWord($ffffffff);\n\n  Maxint = MaxLongint;\n  IsMultiThread = false;\n\n{*****************************************************************************\n                               Base types\n*****************************************************************************}\ntype\n  Integer = LongInt;\n  Cardinal = LongWord;\n  DWord = LongWord;\n  SizeInt = NativeInt;\n  SizeUInt = NativeUInt;\n  PtrInt = NativeInt;\n  PtrUInt = NativeUInt;\n  ValSInt = NativeInt;\n  ValUInt = NativeUInt;\n  ValReal = Double;\n  Real = type Double;\n  Extended = type Double;\n\n  TDateTime = type double;\n  TTime = type TDateTime;\n  TDate = type TDateTime;\n\n  Int64 = type NativeInt unimplemented; // only 53 bits at runtime\n  UInt64 = type NativeUInt unimplemented; // only 52 bits at runtime\n  QWord = type NativeUInt unimplemented; // only 52 bits at runtime\n  Single = type Double unimplemented;\n  Comp = type NativeInt unimplemented;\n  NativeLargeInt = NativeInt;\n  NativeLargeUInt = NativeUInt;\n\n  UnicodeString = type String;\n  WideString = type String;\n  WideChar = char;\n  UnicodeChar = char;\n\n  TDynArrayIndex = NativeInt;\n  TTextLineBreakStyle = (tlbsLF,tlbsCRLF,tlbsCR);\n\n{*****************************************************************************\n            TObject, TClass, IUnknown, IInterface, TInterfacedObject\n*****************************************************************************}\ntype\n  TGuid = record\n    D1: DWord;\n    D2: word;\n    D3: word;\n    D4: array[0..7] of byte;\n  end;\n  TGUIDString = type string;\n\n  TClass = class of TObject;\n\n  { TObject }\n\n  TObject = class\n  private\n    class var FClassName: String; external name '$classname';\n    class var FClassParent: TClass; external name '$ancestor';\n    class var FUnitName: String; external name '$module.$name';\n  public\n    constructor Create;\n    destructor Destroy; virtual;\n\n    // Free is using compiler magic.\n    // Reasons:\n    // 1. In JS calling obj.Free when obj=nil would crash.\n    // 2. In JS freeing memory requires to set all references to nil.\n    // Therefore any obj.free call is replaced by the compiler with some rtl magic.\n    procedure Free;\n\n    class function ClassType: TClass; assembler;\n    class property ClassName: String read FClassName;\n    class function ClassNameIs(const Name: string): boolean;\n    class property ClassParent: TClass read FClassParent;\n    class function InheritsFrom(aClass: TClass): boolean; assembler;\n    class property UnitName: String read FUnitName;\n\n    procedure AfterConstruction; virtual;\n    procedure BeforeDestruction; virtual;\n\n    function GetInterface(const iid: TGuid; out obj): boolean;\n    function GetInterface(const iidstr: String; out obj): boolean; inline;\n    function GetInterfaceByStr(const iidstr: String; out obj): boolean;\n    function GetInterfaceWeak(const iid: TGuid; out obj): boolean; // equal to GetInterface but the interface returned is not referenced\n\n    function Equals(Obj: TObject): boolean; virtual;\n    function ToString: String; virtual;\n  end;\n\nconst\n  { IInterface }\n  S_OK          = 0;\n  S_FALSE       = 1;\n  E_NOINTERFACE = -2147467262; // FPC: longint($80004002)\n  E_UNEXPECTED  = -2147418113; // FPC: longint($8000FFFF)\n  E_NOTIMPL     = -2147467263; // FPC: longint($80004001)\n\ntype\n  {$Interfaces COM}\n  IUnknown = interface\n    ['{00000000-0000-0000-C000-000000000046}']\n    function QueryInterface(const iid: TGuid; out obj): Integer;\n    function _AddRef: Integer;\n    function _Release: Integer;\n  end;\n  IInterface = IUnknown;\n\n  {$M+}\n  IInvokable = interface(IInterface)\n  end;\n  {$M-}\n\n  { Enumerator support }\n  IEnumerator = interface(IInterface)\n    function GetCurrent: TObject;\n    function MoveNext: Boolean;\n    procedure Reset;\n    property Current: TObject read GetCurrent;\n  end;\n\n  IEnumerable = interface(IInterface)\n    function GetEnumerator: IEnumerator;\n  end;\n\n  { TInterfacedObject }\n\n  TInterfacedObject = class(TObject,IUnknown)\n  protected\n    fRefCount: Integer;\n    { implement methods of IUnknown }\n    function QueryInterface(const iid: TGuid; out obj): Integer; virtual;\n    function _AddRef: Integer; virtual;\n    function _Release: Integer; virtual;\n  public\n    procedure BeforeDestruction; override;\n    property RefCount: Integer read fRefCount;\n  end;\n  TInterfacedClass = class of TInterfacedObject;\n\n  { TAggregatedObject - sub or satellite object using same interface as controller }\n\n  TAggregatedObject = class(TObject)\n  private\n    fController: Pointer;\n    function GetController: IUnknown;\n  protected\n    { implement methods of IUnknown }\n    function QueryInterface(const iid: TGuid; out obj): Integer; virtual;\n    function _AddRef: Integer; virtual;\n    function _Release: Integer; virtual;\n  public\n    constructor Create(const aController: IUnknown); reintroduce;\n    property Controller: IUnknown read GetController;\n  end;\n\n  { TContainedObject }\n\n  TContainedObject = class(TAggregatedObject,IInterface)\n  protected\n    function QueryInterface(const iid: TGuid; out obj): Integer; override;\n  end;\n\nconst\n  { for safe as operator support }\n  IObjectInstance: TGuid = '{D91C9AF4-3C93-420F-A303-BF5BA82BFD23}';\n\nfunction GUIDToString(const GUID: TGUID): string; external name 'rtl.guidrToStr';\n\n{*****************************************************************************\n                              Array of const support\n*****************************************************************************}\n\nconst\n  vtInteger       = 0;\n  vtBoolean       = 1;\n  //vtChar          = 2; // Delphi/FPC: ansichar\n  vtExtended      = 3; // Note: double in pas2js, PExtended in Delphi/FPC\n  //vtString        = 4; // Delphi/FPC: PShortString\n  vtPointer       = 5;\n  //vtPChar         = 6;\n  vtObject        = 7;\n  vtClass         = 8;\n  vtWideChar      = 9;\n  //vtPWideChar     = 10;\n  //vtAnsiString    = 11;\n  vtCurrency      = 12; // Note: currency in pas2js, PCurrency in Delphi/FPC\n  //vtVariant       = 13;\n  vtInterface     = 14;\n  //vtWideString    = 15;\n  //vtInt64         = 16;\n  //vtQWord         = 17;\n  vtUnicodeString = 18;\n  // only pas2js, not in Delphi/FPC:\n  vtNativeInt     = 19;\n  vtJSValue       = 20;\n\ntype\n  PVarRec = ^TVarRec;\n  TVarRec = record\n    VType: byte;\n    VJSValue: JSValue;\n    VInteger: LongInt external name 'VJSValue';\n    VBoolean: Boolean external name 'VJSValue';\n    VExtended: Double external name 'VJSValue';\n    VPointer: Pointer external name 'VJSValue';\n    VObject: TObject external name 'VJSValue';\n    VClass: TClass external name 'VJSValue';\n    VWideChar: WideChar external name 'VJSValue';\n    VCurrency: Currency external name 'VJSValue';\n    VInterface: Pointer external name 'VJSValue';\n    VUnicodeString: UnicodeString external name 'VJSValue';\n    VNativeInt: NativeInt external name 'VJSValue';\n  end;\n  TVarRecArray = array of TVarRec;\n\nfunction VarRecs: TVarRecArray; varargs;\n\n{*****************************************************************************\n                            Init / Exit / ExitProc\n*****************************************************************************}\nvar\n  ExitCode: Integer; external name 'rtl.exitcode';\n  IsConsole: Boolean = {$IFDEF NodeJS}true{$ELSE}false{$ENDIF};\n  FirstDotAtFileNameStartIsExtension : Boolean = False;\n\ntype\n  TOnParamCount = function: Longint;\n  TOnParamStr = function(Index: Longint): String;\nvar\n  OnParamCount: TOnParamCount;\n  OnParamStr: TOnParamStr;\n\nfunction ParamCount: Longint;\nfunction ParamStr(Index: Longint): String;\n\n{*****************************************************************************\n                                 Math\n*****************************************************************************}\nconst\n  PI: Double; external name 'Math.PI';\n  MathE: Double; external name 'Math.E'; // Euler's number\n  MathLN10: Double; external name 'Math.LN10'; // ln(10)\n  MathLN2: Double; external name 'Math.LN2'; // ln(2)\n  MathLog10E: Double; external name 'Math.Log10E'; // log10(e)\n  MathLog2E: Double; external name 'Math.LOG2E'; // log2(e)\n  MathSQRT1_2: Double; external name 'Math.SQRT1_2'; // sqrt(0.5)\n  MathSQRT2: Double; external name 'Math.SQRT2'; // sqrt(2)\n\nfunction Abs(const A: integer): integer; overload; external name 'Math.abs';\nfunction Abs(const A: NativeInt): integer; overload; external name 'Math.abs';\nfunction Abs(const A: Double): Double; overload; external name 'Math.abs';\nfunction ArcTan(const A: Double): Double; external name 'Math.atan';\nfunction ArcTan2(const A,B: Double): Double; external name 'Math.atan2';\nfunction Cos(const A: Double): Double; external name 'Math.cos';\nfunction Exp(const A: Double): Double; external name 'Math.exp';\nfunction Frac(const A: Double): Double; assembler;\nfunction Ln(const A: Double): Double; external name 'Math.log';\nfunction Odd(const A: Integer): Boolean; assembler;\nfunction Random(const Range: Integer): Integer; overload; assembler;\nfunction Random: Double; overload; external name 'Math.random';\nfunction Round(const A: Double): NativeInt; external name 'Math.round';\nfunction Sin(const A: Double): Double; external name 'Math.sin';\nfunction Sqr(const A: Integer): Integer; assembler; overload;\nfunction Sqr(const A: Double): Double; assembler; overload;\nfunction sqrt(const A: Double): Double; external name 'Math.sqrt';\nfunction Trunc(const A: Double): NativeInt;\n\n{*****************************************************************************\n                          String functions\n*****************************************************************************}\nconst\n  DefaultTextLineBreakStyle : TTextLineBreakStyle = tlbsLF;\n\nfunction Int(const A: Double): double;\nfunction Copy(const S: string; Index, Size: Integer): String; assembler; overload;\nfunction Copy(const S: string; Index: Integer): String; assembler; overload;\nprocedure Delete(var S: String; Index, Size: Integer); assembler; overload;\nfunction Pos(const Search, InString: String): Integer; assembler; overload;\nfunction Pos(const Search, InString: String; StartAt : Integer): Integer; assembler; overload;\nprocedure Insert(const Insertion: String; var Target: String; Index: Integer); overload;\nfunction upcase(c : char) : char; assembler;\nfunction HexStr(Val: NativeInt; cnt: byte): string; external name 'rtl.hexStr'; overload;\n\nprocedure val(const S: String; out NI : NativeInt; out Code: Integer); overload;\nprocedure val(const S: String; out NI : NativeUInt; out Code: Integer); overload;\nprocedure val(const S: String; out SI : ShortInt; out Code: Integer); overload;\nprocedure val(const S: String; out B : Byte; out Code: Integer); overload;\nprocedure val(const S: String; out SI : smallint; out Code: Integer); overload;\nprocedure val(const S: String; out W : word; out Code : Integer); overload;\nprocedure val(const S: String; out I : integer; out Code : Integer); overload;\nprocedure val(const S: String; out C : Cardinal; out Code: Integer); overload;\nprocedure val(const S: String; out d : double; out Code : Integer); overload;\nprocedure val(const S: String; out b : boolean; out Code: Integer); overload;\nfunction StringOfChar(c: Char; l: NativeInt): String;\n\n{*****************************************************************************\n                          Other functions\n*****************************************************************************}\nprocedure Write; varargs; // ToDo: should be compiler built-in function\nprocedure Writeln; varargs; // ToDo: should be compiler built-in function\n\nType\n  TConsoleHandler = Procedure (S : JSValue; NewLine : Boolean);\nFunction SetWriteCallBack(H : TConsoleHandler) : TConsoleHandler;\n\nfunction Assigned(const V: JSValue): boolean; assembler; overload;\nfunction StrictEqual(const A: JSValue; const B): boolean; assembler;\nfunction StrictInequal(const A: JSValue; const B): boolean; assembler;\n\nimplementation\n\ntype\n\n  { TJSObj - simple access to JS Object }\n\n  TJSObj = class external name 'Object'\n  private\n    function GetProperties(Name: String): JSValue; external name '[]';\n    procedure SetProperties(Name: String; const AValue: JSValue); external name '[]';\n  public\n    //constructor new;\n    //function hasOwnProperty(prop: String): boolean;\n    property Properties[Name: String]: JSValue read GetProperties write SetProperties; default;\n  end;\n\n  TJSArray = class external name 'Array'\n  public\n    //length: nativeint;\n    //constructor new; overload;\n    function push(aElement : JSValue) : NativeInt; varargs;\n  end;\n\n  TJSArguments = class external name 'arguments'\n  private\n    FLength: NativeInt; external name 'length';\n    function GetElements(Index: NativeInt): JSValue; external name '[]';\n  public\n    property Length: NativeInt read FLength;\n    property Elements[Index: NativeInt]: JSValue read GetElements; default;\n  end;\nvar\n  JSArguments: TJSArguments; external name 'arguments';\n\n// function parseInt(s: String; Radix: NativeInt): NativeInt; external name 'parseInt'; // may result NaN\nfunction isNaN(i: JSValue): boolean; external name 'isNaN'; // may result NaN\n\n// needed by ClassNameIs, the real SameText is in SysUtils\nfunction SameText(const s1, s2: String): Boolean; assembler;\nasm\n  return s1.toLowerCase() == s2.toLowerCase();\nend;\n\nfunction VarRecs: TVarRecArray;\nvar\n  i: nativeint;\n  v: PVarRec;\nbegin\n  Result:=nil;\n  while i<JSArguments.Length do\n    begin\n    new(v);\n    v^.VType:=byte(JSArguments[i]);\n    inc(i);\n    v^.VJSValue:=JSArguments[i];\n    inc(i);\n    TJSArray(Result).push(v^);\n    end;\nend;\n\nfunction ParamCount: Longint;\nbegin\n  if Assigned(OnParamCount) then\n    Result:=OnParamCount()\n  else\n    Result:=0;\nend;\n\nfunction ParamStr(Index: Longint): String;\nbegin\n  if Assigned(OnParamStr) then\n    Result:=OnParamStr(Index)\n  else if Index=0 then\n    Result:='js'\n  else\n    Result:='';\nend;\n\nfunction Frac(const A: Double): Double; assembler;\nasm\n  return A % 1;\nend;\n\nfunction Odd(const A: Integer): Boolean; assembler;\nasm\n  return A&1 != 0;\nend;\n\nfunction Random(const Range: Integer): Integer; assembler;\nasm\n  return Math.floor(Math.random()*Range);\nend;\n\nfunction Sqr(const A: Integer): Integer; assembler;\nasm\n  return A*A;\nend;\n\nfunction Sqr(const A: Double): Double; assembler;\nasm\n  return A*A;\nend;\n\nfunction Trunc(const A: Double): NativeInt; assembler;\nasm\n  if (!Math.trunc) {\n    Math.trunc = function(v) {\n      v = +v;\n      if (!isFinite(v)) return v;\n      return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);\n    };\n  }\n  $mod.Trunc = Math.trunc;\n  return Math.trunc(A);\nend;\n\nfunction Copy(const S: string; Index, Size: Integer): String; assembler;\nasm\n  if (Index<1) Index = 1;\n  return (Size>0) ? S.substring(Index-1,Index+Size-1) : \"\";\nend;\n\nfunction Copy(const S: string; Index: Integer): String; assembler;\nasm\n  if (Index<1) Index = 1;\n  return S.substr(Index-1);\nend;\n\nprocedure Delete(var S: String; Index, Size: Integer);\nvar\n  h: String;\nbegin\n  if (Index<1) or (Index>length(S)) or (Size<=0) then exit;\n  h:=S;\n  S:=copy(h,1,Index-1)+copy(h,Index+Size);\nend;\n\nfunction Pos(const Search, InString: String): Integer; assembler;\nasm\n  return InString.indexOf(Search)+1;\nend;\n\nfunction Pos(const Search, InString: String; StartAt : Integer): Integer; assembler; overload;\nasm\n  return InString.indexOf(Search,StartAt-1)+1;\nend;\n\nprocedure Insert(const Insertion: String; var Target: String; Index: Integer);\nvar\n  t: String;\nbegin\n  if Insertion='' then exit;\n  t:=Target;\n  if Index<1 then\n    Target:=Insertion+t\n  else if Index>length(t) then\n    Target:=t+Insertion\n  else\n    Target:=copy(t,1,Index-1)+Insertion+copy(t,Index,length(t));\nend;\n\nvar\n  WriteBuf: String;\n  WriteCallBack : TConsoleHandler;\n\nFunction SetWriteCallBack(H : TConsoleHandler) : TConsoleHandler;\n\nbegin\n  Result:=WriteCallBack;\n  WriteCallBack:=H;\nend;\n\nprocedure Write;\nvar\n  i: Integer;\nbegin\n  for i:=0 to JSArguments.Length-1 do\n    if Assigned(WriteCallBack) then\n      WriteCallBack(JSArguments[i],False)\n    else\n      WriteBuf:=WriteBuf+String(JSArguments[i]);\nend;\n\nprocedure Writeln;\n\nvar\n  i,l: Integer;\n  s: String;\n\nbegin\n  L:=JSArguments.Length-1;\n  if Assigned(WriteCallBack) then\n    begin\n    for i:=0 to L do\n      WriteCallBack(JSArguments[i],I=L);\n    end\n  else\n    begin\n    s:=WriteBuf;\n    for i:=0 to L do\n      s:=s+String(JSArguments[i]);\n    asm\n      console.log(s);\n    end;\n    WriteBuf:='';\n    end;\nend;\n\nfunction Int(const A: Double): double;\n\nbegin\n  // trunc contains fix for missing Math.trunc in IE\n  Result:=Trunc(A);\nend;\n\nfunction Number(S: String): Double; external name 'Number';\n\nfunction valint(const S: String; MinVal, MaxVal: NativeInt; out Code: Integer): NativeInt;\nvar\n  x: double;\nbegin\n  x:=Number(S);\n  if isNaN(x) then\n    case copy(s,1,1) of\n    '$': x:=Number('0x'+copy(S,2));\n    '&': x:=Number('0o'+copy(S,2));\n    '%': x:=Number('0b'+copy(S,2));\n    else\n      Code:=1;\n      exit;\n    end;\n  if isNaN(x) or (X<>Int(X)) then\n    Code:=1\n  else if (x<MinVal) or (x>MaxVal) then\n    Code:=2\n  else\n    begin\n    Result:=Trunc(x);\n    Code:=0;\n    end;\nend;\n\nprocedure val(const S: String; out NI : NativeInt; out Code: Integer);\nbegin\n  NI:=valint(S,low(NI),high(NI),Code);\nend;\n\nprocedure val(const S: String; out NI: NativeUInt; out Code: Integer);\nvar\n  x : double;\nbegin\n  x:=Number(S);\n  if isNaN(x) or (X<>Int(X)) or (X<0) then\n    Code:=1\n  else\n    begin\n    Code:=0;\n    NI:=Trunc(x);\n    end;\nend;\n\nprocedure val(const S: String; out SI : ShortInt; out Code: Integer);\nbegin\n  SI:=valint(S,low(SI),high(SI),Code);\nend;\n\nprocedure val(const S: String; out SI: smallint; out Code: Integer);\nbegin\n  SI:=valint(S,low(SI),high(SI),Code);\nend;\n\nprocedure val(const S: String; out C: Cardinal; out Code: Integer);\nbegin\n  C:=valint(S,low(C),high(C),Code);\nend;\n\nprocedure val(const S: String; out B: Byte; out Code: Integer);\nbegin\n  B:=valint(S,low(B),high(B),Code);\nend;\n\nprocedure val(const S: String; out W: word; out Code: Integer);\nbegin\n  W:=valint(S,low(W),high(W),Code);\nend;\n\nprocedure val(const S : String; out I : integer; out Code : Integer);\nbegin\n  I:=valint(S,low(I),high(I),Code);\nend;\n\nprocedure val(const S : String; out d : double; out Code : Integer);\nVar\n  x: double;\nbegin\n  x:=Number(S);\n  if isNaN(x) then\n    Code:=1\n  else\n    begin\n    Code:=0;\n    d:=x;\n    end;\nend;\n\nprocedure val(const S: String; out b: boolean; out Code: Integer);\nbegin\n  if SameText(S,'true') then\n    begin\n    Code:=0;\n    b:=true;\n    end\n  else if SameText(S,'false') then\n    begin\n    Code:=0;\n    b:=false;\n    end\n  else\n    Code:=1;\nend;\n\nfunction upcase(c : char) : char; assembler;\nasm\n  return c.toUpperCase();\nend;\n\nfunction StringOfChar(c: Char; l: NativeInt): String;\nvar\n  i: Integer;\nbegin\n  asm\n    if ((l>0) && c.repeat) return c.repeat(l);\n  end;\n  Result:='';\n  for i:=1 to l do Result:=Result+c;\nend;\n\nfunction Assigned(const V: JSValue): boolean; assembler;\nasm\n  return (V!=undefined) && (V!=null) && (!rtl.isArray(V) || (V.length > 0));\nend;\n\nfunction StrictEqual(const A: JSValue; const B): boolean; assembler;\nasm\n  return A === B;\nend;\n\nfunction StrictInequal(const A: JSValue; const B): boolean; assembler;\nasm\n  return A !== B;\nend;\n\n{ TContainedObject }\n\nfunction TContainedObject.QueryInterface(const iid: TGuid; out obj): Integer;\nbegin\n  if GetInterface(iid,obj) then\n    Result:=S_OK\n  else\n    Result:=Integer(E_NOINTERFACE);\nend;\n\n{ TAggregatedObject }\n\nfunction TAggregatedObject.GetController: IUnknown;\nbegin\n  Result := IUnknown(fController);\nend;\n\nfunction TAggregatedObject.QueryInterface(const iid: TGuid; out obj): Integer;\nbegin\n  Result := IUnknown(fController).QueryInterface(iid, obj);\nend;\n\nfunction TAggregatedObject._AddRef: Integer;\nbegin\n  Result := IUnknown(fController)._AddRef;\nend;\n\nfunction TAggregatedObject._Release: Integer;\nbegin\n  Result := IUnknown(fController)._Release;\nend;\n\nconstructor TAggregatedObject.Create(const aController: IUnknown);\nbegin\n  inherited Create;\n  { do not keep a counted reference to the controller! }\n  fController := Pointer(aController);\nend;\n\n{ TInterfacedObject }\n\nfunction TInterfacedObject.QueryInterface(const iid: TGuid; out obj): Integer;\nbegin\n  if GetInterface(iid,obj) then\n    Result:=S_OK\n  else\n    Result:=Integer(E_NOINTERFACE);\nend;\n\nfunction TInterfacedObject._AddRef: Integer;\nbegin\n  inc(fRefCount);\n  Result:=fRefCount;\nend;\n\nfunction TInterfacedObject._Release: Integer;\nbegin\n  dec(fRefCount);\n  Result:=fRefCount;\n  if fRefCount=0 then\n    Destroy;\nend;\n\nprocedure TInterfacedObject.BeforeDestruction;\nbegin\n  if fRefCount<>0 then\n    asm\n    rtl.raiseE('EHeapMemoryError');\n    end;\nend;\n\n{ TObject }\n\nconstructor TObject.Create;\nbegin\n\nend;\n\ndestructor TObject.Destroy;\nbegin\n\nend;\n\nprocedure TObject.Free;\nbegin\n  Destroy;\nend;\n\nclass function TObject.ClassType: TClass; assembler;\nasm\n  return this;\nend;\n\nclass function TObject.ClassNameIs(const Name: string): boolean;\nbegin\n  Result:=SameText(Name,ClassName);\nend;\n\nclass function TObject.InheritsFrom(aClass: TClass): boolean; assembler;\nasm\n  return (aClass!=null) && ((this==aClass) || aClass.isPrototypeOf(this));\nend;\n\nprocedure TObject.AfterConstruction;\nbegin\n\nend;\n\nprocedure TObject.BeforeDestruction;\nbegin\n\nend;\n\nfunction TObject.GetInterface(const iid: TGuid; out obj): boolean;\nbegin\n  asm\n    var i = iid.$intf;\n    if (i){\n      // iid is the private TGuid of an interface\n      i = rtl.getIntfG(this,i.$guid,2);\n      if (i){\n        obj.set(i);\n        return true;\n      }\n    }\n  end;\n  Result := GetInterfaceByStr(GUIDToString(iid),obj);\nend;\n\nfunction TObject.GetInterface(const iidstr: String; out obj): boolean;\nbegin\n  Result := GetInterfaceByStr(iidstr,obj);\nend;\n\nfunction TObject.GetInterfaceByStr(const iidstr: String; out obj): boolean;\nbegin\n  if not TJSObj(IObjectInstance)['$str'] then\n    TJSObj(IObjectInstance)['$str']:=GUIDToString(IObjectInstance);\n  if iidstr = TJSObj(IObjectInstance)['$str'] then\n    begin\n    obj:=Self;\n    exit(true);\n    end;\n  asm\n    var i = rtl.getIntfG(this,iidstr,2);\n    obj.set(i);\n    return i!==null;\n  end;\n  Result:=false;\nend;\n\nfunction TObject.GetInterfaceWeak(const iid: TGuid; out obj): boolean;\nbegin\n  Result:=GetInterface(iid,obj);\n  asm\n    if (Result){\n      var o = obj.get();\n      if (o.$kind==='com'){\n        o._Release();\n      }\n    }\n  end;\nend;\n\nfunction TObject.Equals(Obj: TObject): boolean;\nbegin\n  Result:=Obj=Self;\nend;\n\nfunction TObject.ToString: String;\nbegin\n  Result:=ClassName;\nend;\n\n\ninitialization\n  ExitCode:=0; // set it here, so that WPO does not remove it\n\nend.\n\n","{\n    This file is part of the Pas2JS run time library.\n    Copyright (c) 2017 by Mattias Gaertner\n\n    See the file COPYING.FPC, included in this distribution,\n    for details about the copyright.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n **********************************************************************}\nunit JS;\n\n{$mode objfpc}\n{$modeswitch externalclass}\n\ninterface\n\nuses\n  Types;\n\ntype\n  // We cannot use EConvertError or Exception, this would result in a circular dependency.\n\n  { EJS }\n\n  EJS = class(TObject)\n  private\n    FMessage: string;\n  Public\n    constructor Create(const Msg: String); reintroduce;\n    property Message : string Read FMessage Write FMessage;\n  end;\n\n  TJSObjectPropertyDescriptor = JSValue;\n  Float32 = Double;\n  Float64 = Double;\n\n  { TJSObject }\n\n  TJSObject = class external name 'Object'\n  private\n    function GetProperties(Name: String): JSValue; external name '[]';\n    procedure SetProperties(Name: String; const AValue: JSValue); external name '[]';\n  public\n    constructor new;\n    class function create(const proto: TJSObject): TJSObject;\n    class function create(const proto, propertiesObject: TJSObject): TJSObject;\n    class function assign(const Target, Source1: TJSObject): TJSObject; varargs;\n    class procedure defineProperty(const obj: TJSObject; propname: String; const descriptor: TJSObjectPropertyDescriptor);\n    //class procedure defineProperties\n    class function freeze(const obj: TJSObject): TJSObject;\n    class function getOwnPropertyDescriptor(const obj: TJSObject; propname: String): TJSObjectPropertyDescriptor;\n    //class function getOwnPropertyDescriptors\n    class function getOwnPropertyNames(const obj: TJSObject): TStringDynArray;\n    {$IFDEF FIREFOX}\n    class function getOwnPropertySymbols(const obj: TJSObject): TJSValueDynArray;\n    {$ENDIF}\n    class function getPrototypeOf(const obj: TJSObject): TJSObject;\n    {$IFDEF FIREFOX}\n    class function _is(const value1, value2: JSValue): boolean;\n    {$ENDIF}\n    class function isExtensible(const obj: TJSObject): boolean;\n    class function isFrozen(const obj: TJSObject): boolean;\n    class function isSealed(const obj: TJSObject): boolean;\n    class function keys(const obj: TJSObject): TStringDynArray;\n    class function preventExtensions(const obj: TJSObject): TJSObject;\n    class function seal(const obj: TJSObject): TJSObject;\n    class function setPrototypeOf(const obj, prototype: TJSObject): TJSObject;\n    function hasOwnProperty(prop: String): boolean;\n    function isPrototypeOf(const obj: TJSObject): boolean;\n    function propertyIsEnumerable(propname: String): boolean;\n    function toLocaleString: String;\n    function toString: String;\n    function valueOf: JSValue;\n    property Properties[Name: String]: JSValue read GetProperties write SetProperties; default;\n  end;\n\n  TJSObjectDynArray = Array of TJSObject;\n  TJSObjectDynArrayArray = Array of TJSObjectDynArray;\n  TJSStringDynArray = Array of String;\n\n  { TJSFunction }\n\n  TJSFunction = class external name 'Function'(TJSObject)\n  private\n    Flength: NativeInt external name 'length';\n    Fprototyp: TJSFunction external name 'prototyp';\n  public\n    name: String;\n    property prototyp: TJSFunction read Fprototyp;\n    property length: NativeInt read Flength;\n    function apply(thisArg: TJSObject; const ArgArray: TJSValueDynArray): JSValue; varargs;\n    function bind(thisArg: TJSObject): JSValue; varargs;\n    function call(thisArg: TJSObject): JSValue; varargs;\n  end;\n\n  { TJSDate - wrapper for JavaScript Date }\n\n  TJSDate = class external name 'Date'(TJSFunction)\n  private\n    function getDate: NativeInt;\n    function getFullYear: NativeInt;\n    function getHours: NativeInt;\n    function getMilliseconds: NativeInt;\n    function getMinutes: NativeInt;\n    function getMonth: NativeInt;\n    function getSeconds: NativeInt;\n    function getYear: NativeInt;\n    function getTime: NativeInt;\n    function getUTCDate: NativeInt;\n    function getUTCFullYear: NativeInt;\n    function getUTCHours: NativeInt;\n    function getUTCMilliseconds: NativeInt;\n    function getUTCMinutes: NativeInt;\n    function getUTCMonth: NativeInt;\n    function getUTCSeconds: NativeInt;\n    procedure setDate(const AValue: NativeInt);\n    procedure setFullYear(const AValue: NativeInt);\n    procedure setHours(const AValue: NativeInt);\n    procedure setMilliseconds(const AValue: NativeInt);\n    procedure setMinutes(const AValue: NativeInt);\n    procedure setMonth(const AValue: NativeInt);\n    procedure setSeconds(const AValue: NativeInt);\n    procedure setYear(const AValue: NativeInt);\n    procedure setTime(const AValue: NativeInt);\n    procedure setUTCDate(const AValue: NativeInt);\n    procedure setUTCFullYear(const AValue: NativeInt);\n    procedure setUTCHours(const AValue: NativeInt);\n    procedure setUTCMilliseconds(const AValue: NativeInt);\n    procedure setUTCMinutes(const AValue: NativeInt);\n    procedure setUTCMonth(const AValue: NativeInt);\n    procedure setUTCSeconds(const AValue: NativeInt);\n  public\n    constructor New; reintroduce;\n    constructor New(const MilliSecsSince1970: NativeInt); // milliseconds since 1 January 1970 00:00:00 UTC, with leap seconds ignored\n    constructor New(const aDateString: String); // RFC 2822, ISO8601\n    constructor New(aYear: NativeInt; aMonth: NativeInt; aDayOfMonth: NativeInt = 1;\n      TheHours: NativeInt = 0; TheMinutes: NativeInt = 0; TheSeconds: NativeInt = 0;\n      TheMilliseconds: NativeInt = 0);\n    class function now: NativeInt; // current date and time in milliseconds since 1 January 1970 00:00:00 UTC, with leap seconds ignored\n    class function parse(const aDateString: string): NativeInt; // format depends on browser\n    class function UTC(aYear: NativeInt; aMonth: NativeInt = 0; aDayOfMonth: NativeInt = 1;\n      TheHours: NativeInt = 0; TheMinutes: NativeInt = 0; TheSeconds: NativeInt = 0;\n      TheMilliseconds: NativeInt = 0): NativeInt;\n    function getDay: NativeInt;\n    function getTimezoneOffset: NativeInt;\n    function getUTCDay: NativeInt; // day of the week\n    function toDateString: string; // human readable date, without time\n    function toISOString: string; // ISO 8601 Extended Format\n    function toJSON: string;\n    function toGMTString: string; // in GMT timezone\n    function toLocaleDateString: string; // date in locale timezone, no time\n    function toLocaleString: string; reintroduce; // date and time in locale timezone\n    function toLocaleTimeString: string; // time in locale timezone, no date\n    function toTimeString: string; // time human readable, no date\n    function toUTCString: string; // date and time using UTC timezone\n    property Year: NativeInt read getYear write setYear;\n    property Time: NativeInt read getTime write setTime; // milliseconds since 1 January 1970 00:00:00 UTC, with leap seconds ignored\n    property FullYear: NativeInt read getFullYear write setFullYear;\n    property UTCDate: NativeInt read getUTCDate write setUTCDate; // day of month\n    property UTCFullYear: NativeInt read getUTCFullYear write setUTCFullYear;\n    property UTCHours: NativeInt read getUTCHours write setUTCHours;\n    property UTCMilliseconds: NativeInt read getUTCMilliseconds write setUTCMilliseconds;\n    property UTCMinutes: NativeInt read getUTCMinutes write setUTCMinutes;\n    property UTCMonth: NativeInt read getUTCMonth write setUTCMonth;\n    property UTCSeconds: NativeInt read getUTCSeconds write setUTCSeconds;\n    property Month: NativeInt read getMonth write setMonth;\n    property Date: NativeInt read getDate write setDate; // day of the month, starting at 1\n    property Hours: NativeInt read getHours write setHours;\n    property Minutes: NativeInt read getMinutes write setMinutes;\n    property Seconds: NativeInt read getSeconds write setSeconds;\n    property Milliseconds: NativeInt read getMilliseconds write setMilliseconds;\n  end;\n\n  TLocaleCompareOptions = record\n    localematched : string;\n    usage: string;\n    sensitivity : string;\n    ignorePunctuation : Boolean;\n    numeric : boolean;\n    caseFirst : string;\n  end;\n\n  TJSRegexp = class external name 'RegExp'\n  private\n  {$IFDEF FIREFOX}\n    // not on all browsers:\n    FFlags : string; external name 'flags';\n    FSticky : boolean; external name 'sticky';\n  {$endif}\n    fglobal: boolean; external name 'global';\n    fignoreCase : boolean; external name 'ignoreCase';\n    fmultiline : boolean; external name 'multiline';\n    fsource : string; external name 'source';\n    funicode : boolean; external name 'unicode';\n  public\n    Constructor New(Pattern : string);\n    Constructor New(Pattern, Flags : string);\n    lastIndex: NativeInt;\n    function exec(aString : string): TStringDynArray;\n    function test(aString : string) : boolean;\n    function toString : String;\n    property Global : boolean read fglobal;\n    property IgnoreCase : Boolean read FIgnoreCase;\n    property Multiline : Boolean Read FMultiLine;\n    Property Source : string Read FSource;\n    Property Unicode : boolean Read FUnicode;\n    {$IFDEF FIREFOX}\n    // not on all browsers:\n    property Flags : string read FFlags;\n    property Sticky : boolean read FSticky;\n    {$endif}\n  end;\n\n\n  TReplaceCallBack = Function () : string; varargs;\n\n  TJSString = class external name 'String'\n  private\n    flength : NativeInt; external name 'length';\n  public \n    constructor New(Const S : String);\n    constructor New(Const I : NativeInt);\n    constructor New(Const D : double);\n    property length : NativeInt read flength; \n    class function fromCharCode() : string; varargs;\n    class function fromCodePoint() : string; varargs;\n    function anchor(const aName : string) : string;\n    function charAt(aIndex : NativeInt) : string;\n    function charCodeAt(aIndex : NativeInt) : NativeInt;\n    function codePointAt(aIndex : NativeInt) : NativeInt;\n    function concat(s : string) : string; varargs;\n    function endsWith(aSearchString : string; Pos : NativeInt = 0) : boolean;\n    function includes(aSearchString : string; Pos : NativeInt = 0) : boolean;\n    function indexOf(aSearchString : String; Pos : NativeInt = 0) : Integer;\n    function lastIndexOf(aSearchString : String) : NativeInt;overload;\n    function lastIndexOf(aSearchString : String; Pos : NativeInt) : Integer;overload;\n    function link(aUrl : string) : String;\n    function localeCompare(aCompareString : string) : NativeInt; overload;\n    function localeCompare(aCompareString : string; aLocales: string) : integer; overload;\n    function localeCompare(compareString : string; locales: string; Options : TlocaleCompareOptions) : integer; overload;\n    function match(aRegexp : TJSRegexp) : TStringDynArray; overload;\n    function match(aRegexp : String) : TStringDynArray;overload;\n    {$IFDEF ECMAScript6}\n    function normalize : string;\n    function normalize(aForm : string) : string;\n    {$ENDIF}\n    function _repeat(aCount : NativeInt) : Integer; external name 'repeat';\n    function replace(aRegexp : String; NewString : String) : String; overload;\n    function replace(aRegexp : TJSRegexp; NewString : String) : String; overload;\n    function replace(Regexp : String; aCallback : TReplaceCallBack) : String; overload;\n    function replace(Regexp : TJSRegexp; aCallback : TReplaceCallBack) : String; overload;\n    function search(Regexp : TJSRegexp) : NativeInt; overload;\n    function search(Regexp : JSValue) : NativeInt; overload;\n    function slice(aBeginIndex : NativeInt) : String; overload;\n    function slice(aBeginIndex, aEndIndex : NativeInt) : String; overload;\n    function split : TStringDynArray; overload;\n    function split(aSeparator : string) : TStringDynArray; overload;\n    function split(aSeparator : string; aLimit : NativeInt) : TStringDynArray; overload;\n    function startsWith(aSearchString : String) : Boolean; overload;\n    function startsWith(aSearchString : String; aPosition : NativeInt) : Boolean; overload;\n    function substr(aStartIndex : NativeInt) : String; overload;\n    function substr(aStartIndex,aLength : NativeInt) : String; overload;\n    function subString(aStartIndex : NativeInt) : String; overload;\n    function subString(aStartIndex,aEndIndex : NativeInt) : String; overload;\n    function toLocaleLowerCase : String;\n    function toLocaleUpperCase : String;\n    function toLowerCase : String;\n    function toString : string;\n    function toUpperCase : String;\n    function trim : string;\n    function valueOf : string;\n  end;\n\n  TJSArray = Class;\n  \n  TJSArrayEvent = reference to function (element : JSValue; index: NativeInt; anArray : TJSArray) : Boolean;\n  TJSArrayMapEvent = reference to function (element : JSValue; index: NativeInt; anArray : TJSArray) : JSValue;\n  TJSArrayReduceEvent = reference to function (accumulator, currentValue : JSValue; currentIndex : NativeInt; anArray : TJSArray) : JSValue;\n  TJSArrayCompareEvent = reference to function (a,b : JSValue) : NativeInt;\n  TJSArrayCallback = TJSArrayEvent;\n  TJSArrayMapCallback = TJSArrayMapEvent;\n  TJSArrayReduceCallBack = TJSArrayReduceEvent;\n  TJSArrayCompareCallBack = TJSArrayCompareEvent;\n\n  { TJSArray }\n\n  TJSArray = Class external name 'Array'\n  private\n    function GetElements(Index: NativeInt): JSValue; external name '[]';\n    procedure SetElements(Index: NativeInt; const AValue: JSValue); external name '[]';\n  public\n    FLength : NativeInt; external name 'length';\n    constructor new; overload;\n    constructor new(aLength : NativeInt); overload;\n    constructor new(aElement1 : JSValue); varargs; overload;\n    class function _of() : TJSArray; varargs; external name 'of'; \n    class function isArray(a: JSValue) : Boolean;\n{$IFDEF JAVASCRIPT2015}    \n    class function from(a : JSValue) : TJSArray;\n{$ENDIF}    \n    function concat(el : JSValue) : TJSArray; varargs;\n    function copyWithin(aTarget : NativeInt) : TJSarray;overload; // not in IE\n    function copyWithin(aTarget, aStart : NativeInt) : TJSarray;overload; // not in IE\n    function copyWithin(aTarget, aStart, aEnd : NativeInt) : TJSarray;overload; // not in IE\n    Function every(const aCallback : TJSArrayCallBack) : boolean;overload;\n    Function every(const aCallback : TJSArrayEvent; aThis : TObject) : boolean;overload;\n    Function filter(const aCallBack : TJSArrayCallBack) : TJSArray; overload;\n    Function filter(const aCallBack : TJSArrayEvent; aThis : TObject) : TJSArray;overload;\n    Function fill(aValue : JSValue) : TJSArray; overload;\n    Function fill(aValue : JSValue; aStartIndex : NativeInt) : TJSArray; overload;\n    Function fill(aValue : JSValue; aStartIndex,aEndIndex : NativeInt) : TJSArray; overload;\n    Function find(const aCallBack : TJSArrayCallBack) : JSValue; overload;\n    Function find(const aCallBack : TJSArrayEvent; aThis : TObject) : JSValue; overload;\n    Function findIndex(const aCallBack : TJSArrayCallBack) : NativeInt; overload;\n    Function findIndex(const aCallBack : TJSArrayEvent; aThis : TObject) : NativeInt; overload;\n    procedure forEach(const aCallBack : TJSArrayEvent); overload;\n    procedure forEach(const aCallBack : TJSArrayEvent; aThis : TObject); overload;\n    function includes(aElement : JSValue) : Boolean; overload;\n    function includes(aElement : JSValue; FromIndex : NativeInt) : Boolean; overload;\n    function indexOf(aElement : JSValue) : NativeInt; overload;\n    function indexOf(aElement : JSValue; FromIndex : NativeInt) : NativeInt; overload;\n    function join : String; overload;\n    function join (aSeparator : string) : String; overload;\n    function lastIndexOf(aElement : JSValue) : NativeInt; overload;\n    function lastIndexOf(aElement : JSValue; FromIndex : NativeInt) : NativeInt; overload;\n    Function map(const aCallBack : TJSArrayMapCallBack) : TJSArray; overload;\n    Function map(const aCallBack : TJSArrayMapEvent; aThis : TObject) : TJSArray; overload;\n    function pop : JSValue; \n    function push(aElement : JSValue) : NativeInt; varargs;\n    function reduce(const aCallBack : TJSArrayReduceCallBack) : JSValue; overload;\n    function reduce(const aCallBack : TJSArrayReduceCallBack; initialValue : JSValue) : JSValue; overload;\n    function reduceRight(const aCallBack : TJSArrayReduceCallBack) : JSValue; overload;\n    function reduceRight(const aCallBack : TJSArrayReduceCallBack; initialValue : JSValue) : JSValue; overload;\n    Function reverse : TJSArray;\n    Function shift : JSValue;\n    Function slice : TJSArray; overload;\n    function slice(aBegin : NativeInt) : TJSArray; overload;\n    function slice(aBegin,aEnd : NativeInt) : TJSArray; overload;\n    Function some(const aCallback : TJSArrayCallBack) : boolean; overload;\n    Function some(const aCallback : TJSArrayEvent; aThis : TObject) : boolean; overload;\n    Function sort(const aCallback : TJSArrayCompareCallBack) : TJSArray; overload;\n    Function sort() : TJSArray; overload;\n    function splice(aStart : NativeInt) : TJSArray; overload;\n    function splice(aStart,aDeleteCount : NativeInt) : TJSArray; varargs; overload;\n    function toLocaleString: String; overload;\n    function toLocaleString(locales : string) : String; overload;\n    function toLocaleString(locales : string; const Options : TLocaleCompareOptions) : String; overload;\n    function toString : String;\n    function unshift : NativeInt; varargs; \n    Property Length : NativeInt Read FLength Write FLength;\n    property Elements[Index: NativeInt]: JSValue read GetElements write SetElements; default;\n  end;\n\n  TJSArrayBuffer = Class external name 'ArrayBuffer'\n  private\n    fLength : NativeInt; external name 'byteLength';\n  public\n    constructor new(aByteLength : NativeInt);\n    class function isView(aValue : JSValue) : Boolean;   \n    function slice(aBegin : NativeInt) : TJSArrayBuffer; overload;\n    function slice(aBegin,aEnd : NativeInt) : TJSArrayBuffer; overload;\n    Property byteLength : NativeInt Read fLength;\n  end;\n\n  TJSBufferSource = class external name 'BufferSource'\n  end;\n\n  { TJSTypedArray }\n  TJSTypedArray = Class;\n\n  TJSTypedArrayCallBack = function (element : JSValue; index: NativeInt; anArray : TJSTypedArray) : Boolean;\n  TJSTypedArrayEvent = function (element : JSValue; index: NativeInt; anArray : TJSTypedArray) : Boolean of object;\n  TJSTypedArrayMapCallBack = function (element : JSValue; index: NativeInt; anArray : TJSTypedArray) : JSValue;\n  TJSTypedArrayMapEvent = function (element : JSValue; index: NativeInt; anArray : TJSTypedArray) : JSValue of object;\n  TJSTypedArrayReduceCallBack = function (accumulator, currentValue : JSValue; currentIndex : NativeInt; anArray : TJSTypedArray) : JSValue;\n  TJSTypedArrayCompareCallBack = function (a,b : JSValue) : NativeInt;\n\n  TJSTypedArray = class external name 'TypedArray' (TJSBufferSource)\n  Private\n    FBuffer: TJSArrayBuffer; external name 'buffer';\n    FByteLength: NativeInt; external name 'byteLength';\n    FLength: NativeInt; external name 'length';\n    FByteOffset: NativeInt; external name 'byteOffset';\n    function getValue(Index : NativeInt) : JSValue; external name '[]';\n    procedure setValue(Index : NativeInt;AValue : JSValue); external name '[]';\n  Public\n    class var BYTES_PER_ELEMENT : NativeInt;\n    class var name : string;\n    class function from(aValue : jsValue) : TJSTypedArray;\n    class function from(aValue : jsValue; Map : TJSTypedArrayMapCallBack) : TJSTypedArray;\n    class function from(aValue : jsValue; aMap : TJSTypedArrayMapEvent) : TJSTypedArray;\n    class function _of(aValue : jsValue) : TJSTypedArray; varargs; external name 'of';\n    function copyWithin(aTarget : NativeInt) : TJSTypedArray;overload;\n    function copyWithin(aTarget, aStart : NativeInt) : TJSTypedArray;overload;\n    function copyWithin(aTarget, aStart, aEnd : NativeInt) : TJSTypedArray;overload;\n    Function every(const aCallback : TJSTypedArrayCallBack) : boolean;overload;\n    Function every(const aCallback : TJSTypedArrayEvent; aThis : TObject) : boolean;overload;\n    Function fill(aValue : JSValue) : TJSTypedArray; overload;\n    Function fill(aValue : JSValue; aStartIndex : NativeInt) : TJSTypedArray; overload;\n    Function fill(aValue : JSValue; aStartIndex,aEndIndex : NativeInt) : TJSTypedArray; overload;\n    Function filter(const aCallBack : TJSTypedArrayCallBack) : TJSTypedArray; overload;\n    Function filter(const aCallBack : TJSTypedArrayEvent; aThis : TObject) : TJSTypedArray;overload;\n    Function find(const aCallBack : TJSTypedArrayCallBack) : JSValue; overload;\n    Function find(const aCallBack : TJSTypedArrayEvent; aThis : TObject) : JSValue; overload;\n    Function findIndex(const aCallBack : TJSTypedArrayCallBack) : NativeInt; overload;\n    Function findIndex(const aCallBack : TJSTypedArrayEvent; aThis : TObject) : NativeInt; overload;\n    procedure forEach(const aCallBack : TJSTypedArrayCallBack); overload;\n    procedure forEach(const aCallBack : TJSTypedArrayEvent; aThis : TObject); overload;\n    function includes(aElement : JSValue) : Boolean; overload;\n    function includes(aElement : JSValue; FromIndex : NativeInt) : Boolean; overload;\n    function indexOf(aElement : JSValue) : NativeInt; overload;\n    function indexOf(aElement : JSValue; FromIndex : NativeInt) : NativeInt; overload;\n    function join : String; overload;\n    function join (aSeparator : string) : String; overload;\n    function lastIndexOf(aElement : JSValue) : NativeInt; overload;\n    function lastIndexOf(aElement : JSValue; FromIndex : NativeInt) : NativeInt; overload;\n    Function map(const aCallBack : TJSTypedArrayCallBack) : TJSTypedArray; overload;\n    Function map(const aCallBack : TJSTypedArrayEvent; aThis : TObject) : TJSTypedArray; overload;\n    function reduce(const aCallBack : TJSTypedArrayReduceCallBack) : JSValue; overload;\n    function reduce(const aCallBack : TJSTypedArrayReduceCallBack; initialValue : JSValue) : JSValue; overload;\n    function reduceRight(const aCallBack : TJSTypedArrayReduceCallBack) : JSValue; overload;\n    function reduceRight(const aCallBack : TJSTypedArrayReduceCallBack; initialValue : JSValue) : JSValue; overload;\n    Function reverse : TJSTypedArray;\n    procedure _set(anArray : TJSArray); external name 'set';\n    procedure _set(anArray : TJSArray; anOffset : NativeInt); external name 'set';\n    procedure _set(anArray : TJSTypedArray); external name 'set';\n    procedure _set(anArray : TJSTypedArray; anOffset : NativeInt); external name 'set';\n    Function slice : TJSTypedArray; overload;\n    function slice(aBegin : NativeInt) : TJSTypedArray; overload;\n    function slice(aBegin,aEnd : NativeInt) : TJSTypedArray; overload;\n    Function some(const aCallback : TJSTypedArrayCallBack) : boolean; overload;\n    Function some(const aCallback : TJSTypedArrayEvent; aThis : TObject) : boolean; overload;\n    Function sort(const aCallback : TJSTypedArrayCompareCallBack) : TJSTypedArray; overload;\n    Function sort() : TJSTypedArray; overload;\n    function splice(aStart : NativeInt) : TJSTypedArray; overload;\n    function splice(aStart,aDeleteCount : NativeInt) : TJSTypedArray; varargs; overload;\n    function toLocaleString: String; overload;\n    function toLocaleString(locales : string) : String; overload;\n    function toLocaleString(locales : string; const Options : TLocaleCompareOptions) : String; overload;\n    function toString : String;\n    function unshift : NativeInt; varargs;\n    property buffer : TJSArrayBuffer read FBuffer;\n    property byteLength : NativeInt Read FByteLength;\n    property byteOffset : NativeInt Read FByteOffset;\n    property length : NativeInt Read FLength;\n    property values[Index : NativeInt] : JSValue Read getValue Write SetValue; default;\n  end;\n\n  { TJSInt8Array }\n\n  TJSInt8Array = class external name 'Int8Array' (TJSTypedArray)\n  private\n    function getTypedValue(Index : NativeInt): Shortint; external name '[]';\n    procedure setTypedValue(Index : NativeInt; AValue: Shortint);external name '[]';\n  public\n    constructor new (length : NativeInt);\n    constructor new (atypedArray : TJSTypedArray);\n    constructor new (aObject : TJSObject);\n    constructor new (buffer : TJSArrayBuffer);\n    constructor new (buffer : TJSArrayBuffer; aByteOffset: NativeInt);\n    constructor new (buffer : TJSArrayBuffer; aByteOffset, aLength: NativeInt);\n    class function from(aValue : jsValue) : TJSInt8Array; reintroduce;\n    class function from(aValue : jsValue; Map : TJSTypedArrayMapCallBack) : TJSInt8Array; reintroduce;\n    class function from(aValue : jsValue; aMap : TJSTypedArrayMapEvent) : TJSInt8Array; reintroduce;\n    class function _of(aValue : jsValue) : TJSInt8Array; varargs; external name 'of'; reintroduce;\n    procedure _set(anArray : Array of ShortInt); external name 'set'; reintroduce;\n    procedure _set(anArray : Array of ShortInt; anOffset : NativeInt); external name 'set';\n    property values[Index : NativeInt] : Shortint Read getTypedValue Write setTypedValue; default;\n  end;\n\n  TJSUint8Array  = class external name 'Uint8Array' (TJSTypedArray)\n  private\n    function getTypedValue(Index : NativeInt): Byte; external name '[]';\n    procedure setTypedValue(Index : NativeInt; AValue: Byte);external name '[]';\n  public\n    constructor new (length : NativeInt);\n    constructor new (atypedArray : TJSTypedArray);\n    constructor new (aObject : TJSObject);\n    constructor new (buffer : TJSArrayBuffer);\n    constructor new (buffer : TJSArrayBuffer; aByteOffset: NativeInt);\n    constructor new (buffer : TJSArrayBuffer; aByteOffset, aLength: NativeInt);\n    class function from(aValue : jsValue) : TJSUInt8Array; reintroduce;\n    class function from(aValue : jsValue; Map : TJSTypedArrayMapCallBack) : TJSUInt8Array; reintroduce;\n    class function from(aValue : jsValue; aMap : TJSTypedArrayMapEvent) : TJSUInt8Array; reintroduce;\n    class function _of(aValue : jsValue) : TJSUInt8Array; varargs; external name 'of'; reintroduce;\n    procedure _set(anArray : Array of Byte); external name 'set'; reintroduce;\n    procedure _set(anArray : Array of Byte; anOffset : NativeInt); external name 'set';\n    Property values[Index : NativeInt] : Byte Read getTypedValue Write setTypedValue; default;\n  end;\n\n  TJSUint8ClampedArray  = class external name 'Uint8ClampedArray' (TJSTypedArray)\n  private\n    function getTypedValue(Index : NativeInt): Byte; external name '[]';\n    procedure setTypedValue(Index : NativeInt; AValue: Byte);external name '[]';\n  public\n    constructor new (length : NativeInt);\n    constructor new (atypedArray : TJSTypedArray);\n    constructor new (aObject : TJSObject);\n    constructor new (buffer : TJSArrayBuffer);\n    constructor new (buffer : TJSArrayBuffer; aByteOffset: NativeInt);\n    constructor new (buffer : TJSArrayBuffer; aByteOffset, aLength: NativeInt);\n    class function from(aValue : jsValue) : TJSUInt8ClampedArray; reintroduce;\n    class function from(aValue : jsValue; Map : TJSTypedArrayMapCallBack) : TJSUInt8ClampedArray; reintroduce;\n    class function from(aValue : jsValue; aMap : TJSTypedArrayMapEvent) : TJSUInt8ClampedArray; reintroduce;\n    class function _of(aValue : jsValue) : TJSUInt8ClampedArray; varargs; external name 'of'; reintroduce;\n    procedure _set(anArray : Array of Byte); external name 'set'; reintroduce;\n    procedure _set(anArray : Array of Byte; anOffset : NativeInt); external name 'set';\n    Property values[Index : NativeInt] : Byte Read getTypedValue Write setTypedValue; default;\n  end;\n\n  TJSInt16Array = class external name 'Int16Array' (TJSTypedArray)\n  private\n    function getTypedValue(Index : NativeInt): smallint; external name '[]';\n    procedure setTypedValue(Index : NativeInt; AValue: Smallint);external name '[]';\n  public\n    constructor new (length : NativeInt);\n    constructor new (atypedArray : TJSTypedArray);\n    constructor new (aObject : TJSObject);\n    constructor new (buffer : TJSArrayBuffer);\n    constructor new (buffer : TJSArrayBuffer; aByteOffset: NativeInt);\n    constructor new (buffer : TJSArrayBuffer; aByteOffset, aLength: NativeInt);\n    class function from(aValue : jsValue) : TJSInt16Array; reintroduce;\n    class function from(aValue : jsValue; Map : TJSTypedArrayMapCallBack) : TJSInt16Array; reintroduce;\n    class function from(aValue : jsValue; aMap : TJSTypedArrayMapEvent) : TJSInt16Array; reintroduce;\n    class function _of(aValue : jsValue) : TJSInt16Array; varargs; external name 'of'; reintroduce;\n    procedure _set(anArray : Array of SmallInt); external name 'set'; reintroduce;\n    procedure _set(anArray : Array of SmallInt; anOffset : NativeInt); external name 'set';\n    Property values[Index : NativeInt] : SmallInt Read getTypedValue Write setTypedValue; default;\n  end;\n\n  TJSUint16Array = class external name 'Uint16Array' (TJSTypedArray)\n  private\n    function getTypedValue(Index : NativeInt): Word; external name '[]';\n    procedure setTypedValue(Index : NativeInt; AValue: Word);external name '[]';\n  public\n    constructor new (length : NativeInt);\n    constructor new (atypedArray : TJSTypedArray);\n    constructor new (aObject : TJSObject);\n    constructor new (buffer : TJSArrayBuffer);\n    constructor new (buffer : TJSArrayBuffer; aByteOffset: NativeInt);\n    constructor new (buffer : TJSArrayBuffer; aByteOffset, aLength: NativeInt);\n    class function from(aValue : jsValue) : TJSUInt16Array; reintroduce;\n    class function from(aValue : jsValue; Map : TJSTypedArrayMapCallBack) : TJSUInt16Array; reintroduce;\n    class function from(aValue : jsValue; aMap : TJSTypedArrayMapEvent) : TJSUInt16Array; reintroduce;\n    class function _of(aValue : jsValue) : TJSUInt16Array; varargs; external name 'of'; reintroduce;\n    procedure _set(anArray : Array of Word); external name 'set'; reintroduce;\n    procedure _set(anArray : Array of Word; anOffset : NativeInt); external name 'set';\n    Property values[Index : NativeInt] : Word Read getTypedValue Write setTypedValue; default;\n  end;\n\n  TJSInt32Array = class external name 'Int32Array' (TJSTypedArray)\n  private\n    function getTypedValue(Index : NativeInt): longint; external name '[]';\n    procedure setTypedValue(Index : NativeInt; AValue: longint);external name '[]';\n  public\n    constructor new (length : NativeInt);\n    constructor new (atypedArray : TJSTypedArray);\n    constructor new (aObject : TJSObject);\n    constructor new (buffer : TJSArrayBuffer);\n    constructor new (buffer : TJSArrayBuffer; aByteOffset: NativeInt);\n    constructor new (buffer : TJSArrayBuffer; aByteOffset, aLength: NativeInt);\n    class function from(aValue : jsValue) : TJSInt32Array; reintroduce;\n    class function from(aValue : jsValue; Map : TJSTypedArrayMapCallBack) : TJSInt32Array; reintroduce;\n    class function from(aValue : jsValue; aMap : TJSTypedArrayMapEvent) : TJSInt32Array; reintroduce;\n    class function _of(aValue : jsValue) : TJSInt32Array; varargs;external name 'of'; reintroduce;\n    procedure _set(anArray : Array of LongInt); external name 'set'; reintroduce;\n    procedure _set(anArray : Array of LongInt; anOffset : NativeInt); external name 'set';\n    Property values[Index : NativeInt] : longint Read getTypedValue Write setTypedValue; default;\n  end;\n\n  TJSUint32Array = class external name 'Uint32Array' (TJSTypedArray)\n  private\n    function getTypedValue(Index : NativeInt): LongWord; external name '[]';\n    procedure setTypedValue(Index : NativeInt; AValue: LongWord);external name '[]';\n  public\n    constructor new (length : NativeInt);\n    constructor new (atypedArray : TJSTypedArray);\n    constructor new (aObject : TJSObject);\n    constructor new (buffer : TJSArrayBuffer);\n    constructor new (buffer : TJSArrayBuffer; aByteOffset: NativeInt);\n    constructor new (buffer : TJSArrayBuffer; aByteOffset, aLength: NativeInt);\n    class function from(aValue : jsValue) : TJSUInt32Array; reintroduce;\n    class function from(aValue : jsValue; Map : TJSTypedArrayMapCallBack) : TJSUInt32Array; reintroduce;\n    class function from(aValue : jsValue; aMap : TJSTypedArrayMapEvent) : TJSUInt32Array; reintroduce;\n    class function _of(aValue : jsValue) : TJSUInt32Array; varargs; external name 'of'; reintroduce;\n    procedure _set(anArray : Array of Cardinal); external name 'set'; reintroduce;\n    procedure _set(anArray : Array of Cardinal; anOffset : NativeInt); external name 'set';\n    Property values[Index : NativeInt] : LongWord Read getTypedValue Write setTypedValue; default;\n  end;\n\n  TJSFloat32Array = class external name 'Float32Array' (TJSTypedArray)\n  private\n    function getTypedValue(Index : NativeInt): Float32; external name '[]';\n    procedure setTypedValue(Index : NativeInt; AValue: Float32);external name '[]';\n  public\n    constructor new (length : NativeInt);\n    constructor new (atypedArray : TJSTypedArray);\n    constructor new (aObject : TJSObject);\n    constructor new (buffer : TJSArrayBuffer);\n    constructor new (buffer : TJSArrayBuffer; aByteOffset: NativeInt);\n    constructor new (buffer : TJSArrayBuffer; aByteOffset, aLength: NativeInt);\n    class function from(aValue : jsValue) : TJSFloat32Array; reintroduce;\n    class function from(aValue : jsValue; Map : TJSTypedArrayMapCallBack) : TJSFloat32Array; reintroduce;\n    class function from(aValue : jsValue; aMap : TJSTypedArrayMapEvent) : TJSFloat32Array; reintroduce;\n    class function _of(aValue : jsValue) : TJSFloat32Array; varargs; reintroduce;\n    procedure _set(anArray : Array of Double); external name 'set'; reintroduce;\n    procedure _set(anArray : Array of Double; anOffset : NativeInt); external name 'set'; reintroduce;\n    Property values[Index : NativeInt] : Float32 Read getTypedValue Write setTypedValue; default;\n  end;\n\n  TJSFloat64Array = class external name 'Float64Array' (TJSTypedArray)\n  private\n    function getTypedValue(Index : NativeInt): Float64; external name '[]';\n    procedure setTypedValue(Index : NativeInt; AValue: Float64);external name '[]';\n  public\n    constructor new (length : NativeInt);\n    constructor new (atypedArray : TJSTypedArray);\n    constructor new (aObject : TJSObject);\n    constructor new (buffer : TJSArrayBuffer);\n    constructor new (buffer : TJSArrayBuffer; aByteOffset: NativeInt);\n    constructor new (buffer : TJSArrayBuffer; aByteOffset, aLength: NativeInt);\n    class function from(aValue : jsValue) : TJSFloat64Array; reintroduce;\n    class function from(aValue : jsValue; Map : TJSTypedArrayMapCallBack) : TJSFloat64Array; reintroduce;\n    class function from(aValue : jsValue; aMap : TJSTypedArrayMapEvent) : TJSFloat64Array; reintroduce;\n    class function _of(aValue : jsValue) : TJSFloat64Array; varargs; reintroduce;\n    procedure _set(anArray : Array of Double); external name 'set'; reintroduce;\n    procedure _set(anArray : Array of Double; anOffset : NativeInt); external name 'set'; reintroduce;\n    Property values[Index : NativeInt] : Float64 Read getTypedValue Write setTypedValue; default;\n  end;\n\n  TJSDataView = Class external name 'DataView' (TJSBufferSource)\n  private\n    fBuffer : TJSArrayBuffer; external name 'buffer';\n    fLength : NativeInt; external name 'byteLength';\n    fOffset : NativeInt; external name 'byteOffset';\n  public\n    constructor new(aBuffer : TJSArrayBuffer); overload;\n    constructor new(aBuffer : TJSArrayBuffer; aOffset : NativeInt); overload;\n    constructor new(aBuffer : TJSArrayBuffer; aOffset,aByteLength : NativeInt); overload;\n    function getFloat32(aByteOffset : NativeInt) : double; overload;\n    function getFloat32(aByteOffset : NativeInt; aLittleEndian: Boolean) : double; overload;\n    function getFloat64(aByteOffset : NativeInt) : double; overload;\n    function getFloat64(aByteOffset : NativeInt; aLittleEndian: Boolean) : double; overload;\n    function getInt8(aByteOffset : NativeInt) : ShortInt; \n    function getInt16(aByteOffset : NativeInt) : SmallInt; overload;\n    function getInt16(aByteOffset : NativeInt; aLittleEndian : Boolean) : SmallInt; overload;\n    function getInt32(aByteOffset : NativeInt) : Longint; overload;\n    function getInt32(aByteOffset : NativeInt; aLittleEndian : Boolean) : Longint; overload;\n    function getUint8(aByteOffset : NativeInt) : Byte; overload;\n    function getUint16(aByteOffset : NativeInt) : Word; overload;\n    function getUint16(aByteOffset : NativeInt; aLittleEndian : Boolean) : Word; overload;\n    function getUint32(aByteOffset : NativeInt) : LongWord; overload;\n    function getUint32(aByteOffset : NativeInt; aLittleEndian : Boolean) : LongWord; overload;\n\n    procedure setFloat32(aByteOffset : NativeInt; aValue : double); overload;\n    procedure setFloat32(aByteOffset : NativeInt; aValue : double; aLittleEndian: Boolean); overload;\n    procedure setFloat64(aByteOffset : NativeInt; aValue : double); overload;\n    procedure setFloat64(aByteOffset : NativeInt; aValue : double; aLittleEndian: Boolean); overload;\n    procedure setInt8(aByteOffset : NativeInt; aValue : ShortInt); \n    procedure setInt16(aByteOffset : NativeInt; aValue : SmallInt); overload;\n    procedure setInt16(aByteOffset : NativeInt; aValue : SmallInt; aLittleEndian : Boolean); overload;\n    procedure setInt32(aByteOffset : NativeInt; aValue : Longint); overload;\n    procedure setInt32(aByteOffset : NativeInt; aValue : Longint; aLittleEndian : Boolean); overload;\n    procedure setUint8(aByteOffset : NativeInt; aValue : Byte); overload;\n    procedure setUint16(aByteOffset : NativeInt; aValue : Word); overload;\n    procedure setUint16(aByteOffset : NativeInt; aValue : Word; aLittleEndian : Boolean); overload;\n    procedure setUint32(aByteOffset : NativeInt; aValue : LongWord); overload;\n    procedure setUint32(aByteOffset : NativeInt; aValue: LongWord; aLittleEndian : Boolean); overload;\n \n    Property byteLength : NativeInt Read fLength;\n    Property byteOffset : NativeInt read fOffset;\n    property buffer : TJSArrayBuffer Read fBuffer;\n  end;\n\n  TJSJSON = class external name 'JSON' (TJSObject)\n  Public\n    class function parse(aJSON : String) : JSValue;\n    // Use this only when you are sure you will get an object, no checking is done.\n    class function parseObject(aJSON : String) : TJSObject; external name 'parse';\n    class function stringify(aValue : JSValue) : string;\n    class function stringify(aValue,aReplacer : JSValue) : string;\n    class function stringify(aValue,aReplacer : JSValue; space:  NativeInt) : string;\n    class function stringify(aValue,aReplacer : JSValue; space:  String) : string;\n  end;\n\n  { TJSError }\n\n  TJSError = Class external name 'Error'\n  private\n    FMessage: String; external name 'message';\n    {$ifdef NodeJS}\n    FStack: JSValue; external name 'stack';\n    {$endif}\n  Public\n    Constructor new;\n    Constructor new(Const aMessage : string);\n    Constructor new(Const aMessage,aFileName : string);\n    Constructor new(Const aMessage,aFileName : string; aLineNumber : NativeInt);\n    Property Message : String Read FMessage;\n    {$ifdef NodeJS}\n    Property Stack: JSValue read FStack;\n    {$endif}\n  end;\n\n\n  TJSPromiseResolver = reference to function (aValue : JSValue) : JSValue;\n  TJSPromiseExecutor = reference to procedure (resolve,reject : TJSPromiseResolver);\n  TJSPromiseFinallyHandler = reference to procedure;\n  TJSPromise = Class;\n  TJSPromiseArray = array of TJSPromise;\n\n  TJSPromise = class external name 'Promise'\n    constructor new(Executor : TJSPromiseExecutor);\n    class function all(arg : Array of JSValue) : TJSPromise; overload;\n    class function all(arg : JSValue) : TJSPromise; overload;\n    class function all(arg : TJSPromiseArray) : TJSPromise; overload;\n    class function race(arg : Array of JSValue) : TJSPromise; overload;\n    class function race(arg : JSValue) : TJSPromise; overload;\n    class function race(arg : TJSPromiseArray) : TJSPromise; overload;\n    class function reject(reason : JSValue) : TJSPromise;\n    class function resolve(value : JSValue): TJSPromise; overload;\n    class function resolve : TJSPromise; overload;\n    function _then (onAccepted : TJSPromiseResolver) : TJSPromise; external name 'then';\n    function catch (onRejected : TJSPromiseResolver) : TJSPromise;\n    function _finally(value : TJSPromiseFinallyHandler): TJSPromise;\n  end;\n\n  TJSFunctionArguments = class external name 'arguments'\n  private\n    FLength: NativeInt; external name 'length';\n    function GetElements(Index: NativeInt): JSValue; external name '[]';\n    procedure SetElements(Index: NativeInt; const AValue: JSValue); external name '[]';\n  public\n    property Length: NativeInt read FLength;\n    property Elements[Index: NativeInt]: JSValue read GetElements write SetElements; default;\n  end;\n\nvar\n  // JSArguments can be used in procedures/functions to provide access to the 'arguments' array.\n  JSArguments: TJSFunctionArguments; external name 'arguments';\n  // JSThis can be used in all code to access the javascript 'this' object.\n  JSThis: TJSObject; external name 'this';\n  // JSExceptValue can be used in catch blocks to access the JS throw value\n  JSExceptValue: JSValue; external name '$e';\n\nfunction new(aElements: TJSValueDynArray) : TJSObject; overload;\nfunction JSDelete(const Obj: JSValue; const PropName: string): boolean; assembler; overload;\n\nfunction decodeURIComponent(encodedURI : String) : String; external name 'decodeURIComponent';\nfunction encodeURIComponent(str : String) : String; external name 'encodeURIComponent';\n\nfunction parseInt(s: String; Radix: NativeInt): NativeInt; overload; external name 'parseInt'; // may result NaN\nfunction parseInt(s: String): NativeInt; overload; external name 'parseInt'; // may result NaN\nfunction parseFloat(s: String): double; overload; external name 'parseFloat'; // may result NaN\n\nfunction hasString(const v: JSValue): boolean; external name 'rtl.hasString';// isString(v) and v<>''\nfunction hasValue(const v: JSValue): boolean; assembler; // returns the JS definition of if(v): v is not false, undefined, null, 0, NaN, or the empty string. Note: JS if(new Boolean(false)) returns true.\nfunction isArray(const v: JSValue): boolean; external name 'rtl.isArray';\nfunction isBoolean(const v: JSValue): boolean; assembler;\nfunction isCallback(const v: JSValue): boolean; assembler;\nfunction isChar(const v: JSValue): boolean; assembler;\nfunction isClass(const v: JSValue): boolean; assembler; // is a Pascal class, e.g. a TClass\nfunction isClassInstance(const v: JSValue): boolean; assembler;// is a Pascal class instance, e.g. a TObject\nfunction isFunction(const v: JSValue): boolean; external name 'rtl.isFunction';\nfunction isInteger(const v: JSValue): boolean; assembler;\nfunction isModule(const v: JSValue): boolean; external name 'rtl.isModule';\nfunction isNull(const v: JSValue): boolean; assembler;\nfunction isNumber(const v: JSValue): boolean; external name 'rtl.isNumber';\nfunction isObject(const v: JSValue): boolean; external name 'rtl.isObject'; // true if not null and a JS Object\nfunction isRecord(const v: JSValue): boolean; assembler;\nfunction isString(const v: JSValue): boolean; external name 'rtl.isString';\nfunction isUndefined(const v: JSValue): boolean; assembler;\nfunction isDefined(const v: JSValue): boolean; assembler;\nfunction isUTF16Char(const v: JSValue): boolean; assembler;\nfunction isExt(const InstanceOrClass, aClass: JSValue): boolean; external name 'rtl.isExt'; // aClass can be a JS object or function\nfunction jsInstanceOf(const aFunction, aFunctionWithPrototype: JSValue): String; assembler;\nfunction jsTypeOf(const v: JSValue): String; external name 'typeof';\nfunction jsIsNaN(const v: JSValue): boolean; external name 'isNaN';// true if value cannot be converted to a number. e.g. True on NaN, undefined, {}, '123'. False on true, null, '', ' ', '1A'\nfunction toNumber(const v: JSValue): double; assembler; // if not possible, returns NaN\nfunction toInteger(const v: JSValue): NativeInt; // if v is not an integer, returns 0\nfunction toObject(Value: JSValue): TJSObject; // If Value is not a Javascript object, returns Nil\nfunction toArray(Value: JSValue): TJSArray; // If Value is not a Javascript array, returns Nil\nfunction toBoolean(Value: JSValue): Boolean; // If Value is not a Boolean, returns False\nfunction toString(Value: JSValue): String; // If Value is not a string, returns ''\n\nType\n  TJSValueType = (jvtNull,jvtBoolean,jvtInteger,jvtFloat,jvtString,jvtObject,jvtArray);\n\nFunction GetValueType(JS : JSValue) : TJSValueType;\n\nConst\n  Null : JSValue; external name 'null';\n  Undefined : JSValue; external name 'undefined';\n\nimplementation\n\nfunction new(aElements: TJSValueDynArray): TJSObject;\n\n  function toString(I : Integer): string; external name 'String';\n\nVar\n  L,I : integer;\n  S : String;\n\nbegin\n  L:=length(aElements);\n  if (L mod 2)=1 then\n    raise EJS.Create('Number of arguments must be even');\n  I:=0;\n  // Check all arguments;\n  While (i<L) do\n    begin\n    if Not isString(aElements[i]) then\n      begin\n      S:=ToString(I);\n      raise EJS.Create('Argument '+S+' must be a string.');\n      end;\n    inc(I,2);\n    end;\n  I:=0;\n  Result:=TJSObject.New;\n  While (i<L) do\n    begin\n    S:=String(aElements[i]);\n    Result.Properties[S]:=aElements[i+1];\n    inc(I,2);\n    end;\nend;\n\nfunction JSDelete(const Obj: JSValue; const PropName: string): boolean; assembler;\nasm\n  return delete Obj[PropName];\nend;\n\nfunction hasValue(const v: JSValue): boolean; assembler;\nasm\n  if(v){ return true; } else { return false; };\nend;\n\nfunction isBoolean(const v: JSValue): boolean; assembler;\nasm\n  return typeof(v) == 'boolean';\nend;\n\nfunction isCallback(const v: JSValue): boolean; assembler;\nasm\n  return rtl.isObject(v) && rtl.isObject(v.scope) && (rtl.isString(v.fn) || rtl.isFunction(v.fn));\nend;\n\nfunction isChar(const v: JSValue): boolean; assembler;\nasm\n  return (typeof(v)!=\"string\") && (v.length==1);\nend;\n\nfunction isClass(const v: JSValue): boolean; assembler;\nasm\n  return (typeof(v)==\"object\") && (v!=null) && (v.$class == v);\nend;\n\nfunction isClassInstance(const v: JSValue): boolean; assembler;\nasm\n  return (typeof(v)==\"object\") && (v!=null) && (v.$class == Object.getPrototypeOf(v));\nend;\n\nfunction isInteger(const v: JSValue): boolean; assembler;\nasm\n  return Math.floor(v)===v;\nend;\n\nfunction isNull(const v: JSValue): boolean; assembler;\n// Note: use identity, \"==\" would fit undefined\nasm\n  return v === null;\nend;\n\nfunction isRecord(const v: JSValue): boolean; assembler;\nasm\n  return (typeof(v)===\"object\")\n      && (typeof(v.$new)===\"function\")\n      && (typeof(v.$clone)===\"function\")\n      && (typeof(v.$eq)===\"function\")\n      && (typeof(v.$assign)===\"function\");\nend;\n\nfunction isUndefined(const v: JSValue): boolean; assembler;\nasm\n  return v == undefined;\nend;\n\nfunction isDefined(const v: JSValue): boolean; assembler;\nasm\n  return !(v == undefined);\nend;\n\nfunction isUTF16Char(const v: JSValue): boolean; assembler;\nasm\n  if (typeof(v)!=\"string\") return false;\n  if ((v.length==0) || (v.length>2)) return false;\n  var code = v.charCodeAt(0);\n  if (code < 0xD800){\n    if (v.length == 1) return true;\n  } else if (code <= 0xDBFF){\n    if (v.length==2){\n      code = v.charCodeAt(1);\n      if (code >= 0xDC00 && code <= 0xDFFF) return true;\n    };\n  };\n  return false;\nend;\n\nfunction jsInstanceOf(const aFunction, aFunctionWithPrototype: JSValue\n  ): String; assembler;\nasm\n  return aFunction instanceof aFunctionWithPrototype;\nend;\n\nfunction toNumber(const v: JSValue): double; assembler;\nasm\n  return v-0;\nend;\n\nfunction toInteger(const v: JSValue): NativeInt;\nbegin\n  if IsInteger(v) then\n    Result:=NativeInt(v)\n  else\n    Result:=0;\nend;\n\nfunction toObject(Value: JSValue): TJSObject;\n\nbegin\n  if IsObject(Value) then\n    Result:=TJSObject(Value)\n  else\n    Result:=Nil;\nend;\n\nfunction toArray(Value: JSValue): TJSArray; // If not possible, returns Nil\n\nbegin\n  if IsArray(Value) then\n    Result:=TJSArray(Value)\n  else\n    Result:=Nil;\nend;\n\nfunction toBoolean(Value: JSValue): Boolean; // If not possible, returns False\n\nbegin\n  if isBoolean(Value) then\n    Result:=Boolean(Value)\n  else\n    Result:=False;\nend;\n\nfunction toString(Value: JSValue): String; // If not possible, returns ''\n\nbegin\n  if IsString(Value) then\n    Result:=String(Value)\n  else\n    Result:='';\nend;\n\n{ EJS }\n\nconstructor EJS.Create(const Msg: String);\nbegin\n  FMessage:=Msg;\nend;\n\n\nfunction GetValueType(JS: JSValue): TJSValueType;\n\nVar\n  t : string;\n\nbegin\n  if isNull(js) then   // null reported as object\n    result:=jvtNull\n  else\n    begin\n    t:=jsTypeOf(js);\n    if (t='string') then\n      Result:=jvtString\n    else if (t='boolean') then\n      Result:=jvtBoolean\n    else if (t='object') then\n      begin\n      if IsArray(JS) then\n        Result:=jvtArray\n      else\n        Result:=jvtObject;\n      end\n    else if (t='number') then\n      if isInteger(JS) then\n        result:=jvtInteger\n      else\n        result:=jvtFloat\n    end;\nend;\n\nend.\n\n","{\n    This file is part of the Pas2JS run time library.\n    Copyright (C) 2019 Silvio Clecio (silvioprog)\n\n    Pascal mapping for ChartJS: https://www.chartjs.org\n\n    See the file COPYING.FPC, included in this distribution,\n    for details about the copyright.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n **********************************************************************}\n\nunit ChartJS;\n\n{$MODE OBJFPC}\n{$MODESWITCH EXTERNALCLASS}\n\ninterface\n\nuses\n  JS,\n  Web;\n\ntype\n  TChart = class;\n  TChartController = class;\n  TChartOptions = class;\n  TChartAnimationCallback = class;\n  TChartMoment = class;\n\n  { Chart Moment display formats class. }\n  TChartMomentDisplayFormats = class external name 'Object' (TJSObject)\n  public\n    millisecond: string;\n    second: string;\n    minute: string;\n    hour: string;\n    day: string;\n    week: string;\n    month: string;\n    quarter: string;\n    year: string;\n  end;\n\n  { Chart Moment time type. }\n  TChartMomentTime = JSValue;\n\n  { Chart Moment parser. }\n  TChartMomentParser = reference to function(const data: JSValue): TChartMoment;\n\n  { Chart Moment class. }\n  TChartMoment = class external name 'Object' (TJSObject)\n  public\n    { Sets how different time units are displayed. }\n    displayFormats: TChartMomentDisplayFormats;\n    { If true and the unit is set to 'week', then the first day of the week will\n      be Monday. Otherwise, it will be Sunday. }\n    isoWeekday: Boolean;\n    { If defined, this will override the data maximum. }\n    max: TChartMomentTime;\n    { If defined, this will override the data minimum. }\n    min: TChartMomentTime;\n    { Custom parser for dates. }\n    parser: string;\n    parser_: TChartMomentParser; external name 'parser';\n    { If defined, dates will be rounded to the start of this unit. See Time\n      Units below for the allowed units. }\n    round: string;\n    { The moment js format string to use for the tooltip. }\n    tooltipFormat: string;\n    { If defined, will force the unit to be a certain type. See Time Units\n      section below for details. }\n    unit_: string; external name 'unit';\n    { The number of units between grid lines. }\n    stepSize: NativeUInt;\n    { The minimum display format to be used for a time unit. }\n    minUnit: string;\n  end;\n\n  { Chart size. }\n  TChartSize = class external name 'Object' (TJSObject)\n  public\n    { Width of the chart. }\n    width: NativeUInt;\n    { Height of the chart. }\n    height: NativeUInt;\n  end;\n\n  { Dataset class. }\n  TChartDataset = class external name 'Object' (TJSObject)\n  public\n    { Chart type. }\n    type_: string; external name 'type';\n    { The label for the dataset which appears in the legend and tooltips. }\n    label_: string; external name 'label';\n    { If true, it represents a hidden dataset. }\n    hidden: Boolean;\n  end;\n\n  { Called when a resize occurs. }\n  TChartResizeEventHandler = reference to procedure(const chart: TChart;\n    const newSize: TChartSize);\n\n  { Hover class. }\n  TChartHover = class external name 'Object' (TJSObject)\n  public\n    { Called when any of the events fire. Called in the context of the chart and\n      passed the event and an array of active elements (bars, points, etc). }\n    onHover: TJSMouseEventHandler;\n    { Sets which elements appear in the tooltip. }\n    mode: string;\n    { If true, the hover mode only applies when the mouse position intersects an\n      item on the chart. }\n    intersect: Boolean;\n    { Can be set to 'x', 'y', or 'xy' to define which directions are used in\n      calculating distances. Defaults to 'x' for index mode and 'xy' in dataset\n      and nearest modes. }\n    axis: string;\n    { Duration in milliseconds it takes to animate hover style changes. }\n    animationDuration: NativeUInt;\n  end;\n\n  { Animation render event. }\n  TChartAnimationRenderEventHandler = reference to procedure(\n    const chart: TChart; const animation: TChartAnimationCallback);\n\n  { Animation event. }\n  TChartAnimationEventHandler = reference to procedure(\n    const animation: TChartAnimationCallback);\n\n  { Animation callbacks class. }\n  TChartAnimationCallback = class external name 'Object' (TJSObject)\n  public\n    { Chart object. }\n    chart: TChart;\n    { Current Animation frame number. }\n    currentStep: NativeUInt;\n    { Number of animation frames. }\n    numSteps: NativeUInt;\n    { Animation easing to use. }\n    easing: string;\n    { Function that renders the chart. }\n    render: TChartAnimationRenderEventHandler;\n    { User callback. }\n    onAnimationProgress: TChartAnimationEventHandler;\n    { User callback. }\n    onAnimationComplete: TChartAnimationEventHandler;\n  end;\n\n  { Animation configuration class. }\n  TChartAnimationConfiguration = class external name 'Object' (TJSObject)\n  public\n    { The number of milliseconds an animation takes. }\n    duration: NativeUInt;\n    { Easing function to use. }\n    easing: string;\n    { Callback called on each step of an animation. }\n    onProgress: TChartAnimationEventHandler;\n    { Callback called at the end of an animation. }\n    onComplete: TChartAnimationEventHandler;\n    { If true, the chart will animate in with a rotation animation. }\n    animateRotate: Boolean;\n    { If true, will animate scaling the chart from the center outwards. }\n    animateScale: Boolean;\n  end;\n\n  { Padding to add inside the chart. }\n  TChartPadding = class external name 'Object' (TJSObject)\n  public\n    top: NativeInt;\n    right: NativeInt;\n    bottom: NativeInt;\n    left:NativeInt;\n  end;\n\n  { Layout configuration class. }\n  TChartLayoutConfiguration = class external name 'Object' (TJSObject)\n  public\n    { The padding to add inside the chart. }\n    padding: NativeInt;\n    { The padding to add inside the chart. }\n    padding_: TChartPadding; external name 'padding';\n  end;\n\n  { Legend item class. }\n  TChartLegendItem = class external name 'Object' (TJSObject)\n  public\n    { Label that will be displayed. }\n    text: string;\n    { Fill style of the legend box. }\n    fillStyle: string;\n    { If true, this item represents a hidden dataset. Label will be rendered\n      with a strike-through effect. }\n    hidden: Boolean;\n    { For box border. See\n      https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineCap. }\n    lineCap: string;\n    { For box border. See\n      https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash. }\n    lineDash: array of NativeUInt;\n    lineDash_: TJSArray; external name 'lineDash';\n    { For box border. See\n      https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset. }\n    lineDashOffset: NativeUInt;\n    { For box border. See\n      https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin. }\n    lineJoin: string;\n    { Width of box border. }\n    lineWidth: NativeUInt;\n    { Stroke style of the legend box. }\n    strokeStyle: string;\n    { Point style of the legend box (only used if usePointStyle is true). }\n    pointStyle: string;\n  end;\n\n  { Legend click event. }\n  TChartLegendClickEventHandler = reference to procedure(\n    const ev: TJSMouseEvent; const legendItem: TChartLegendItem);\n\n  { Legend event handler. }\n  TChartLegendEventHandler = reference to function(\n    const legendItem: TChartLegendItem): TChartLegendItem;\n\n  { Legend label class. }\n  TChartLegendLabel = class external name 'Object' (TJSObject)\n  public\n    { Width of coloured box. }\n    boxWidth: NativeUInt;\n    { Font size of text. }\n    fontSize: NativeUInt;\n    { Font style of text. }\n    fontStyle: string;\n    { Color of text. }\n    fontColor: string;\n    { Font family of legend text. }\n    fontFamily: string;\n    { Padding between rows of colored boxes. }\n    padding: NativeInt;\n    { Generates legend items for each thing in the legend. Default\n      implementation returns the text + styling for the color box. }\n    generateLabels: TChartLegendEventHandler;\n    { Filters legend items out of the legend. Receives 2 parameters,\n      a Legend Item and the chart data. }\n    filter: TChartLegendEventHandler;\n    { Label style will match corresponding point style (size is based on\n      fontSize, boxWidth is not used in this case). }\n    usePointStyle: Boolean;\n  end;\n\n  { Legend configuration class. }\n  TChartLegendConfiguration = class external name 'Object' (TJSObject)\n  public\n    { Is the legend shown? }\n    display: Boolean;\n    { Position of the legend. }\n    position: string;\n    { Marks that this box should take the full width of the canvas (pushing down\n      other boxes). This is unlikely to need to be changed in day-to-day use. }\n    fullWidth: Boolean;\n    { A callback that is called when a click event is registered on a label\n      item. }\n    onClick: TChartLegendClickEventHandler;\n    { A callback that is called when a 'mousemove' event is registered on top of\n    a label item. }\n    onHover: TJSMouseEventHandler;\n    { Legend will show datasets in reverse order. }\n    reverse: Boolean;\n    { Legend weight. }\n    weight: NativeUInt;\n    { Legend label configuration. }\n    labels: TChartLegendLabel;\n  end;\n\n  { Title configuration class. }\n  TChartTitleConfiguration = class external name 'Object' (TJSObject)\n  public\n    { Is the title shown? }\n    display: Boolean;\n    { Position of title. }\n    position: string;\n    { Font size. }\n    fontSize: NativeUInt;\n    { Font family for the title text. }\n    fontFamily: string;\n    { Font color. }\n    fontColor: string;\n    { Font style. }\n    fontStyle: string;\n    { Number of pixels to add above and below the title text. }\n    padding: NativeInt;\n    { Height of an individual line of text. }\n    lineHeight: JSValue;\n    { Title text to display. If specified as an array, text is rendered on\n      multiple lines. }\n    text: string;\n    texts: TJSStringDynArray; external name 'text';\n    text_: TJSArray; external name 'text';\n  end;\n\n  { Tooltip item class. }\n  TChartTooltipItem = class external name 'Object' (TJSObject)\n  public\n    { X Value of the tooltip as a string. }\n    xLabel: String;\n    { Y value of the tooltip as a string. }\n    yLabel: String;\n    { Index of the dataset the item comes from. }\n    datasetIndex: NativeInt;\n    { Index of this data item in the dataset. }\n    index: NativeInt;\n    { X position of matching point. }\n    x: NativeInt;\n    { Y position of matching point. }\n    y: NativeInt;\n  end;\n\n  { Tooltip model body class. }\n  TChartTooltipModelBody = class external name 'Object' (TJSObject)\n  public\n    { Lines of text before the line with the color square. }\n    before: TJSStringDynArray;\n    { Lines of text to render as the main item with color square. }\n    lines: TJSStringDynArray;\n    { Lines of text to render after the main lines. }\n    after: TJSStringDynArray;\n  end;\n\n  { Tooltip model class. }\n  TChartTooltipModel = class external name 'Object' (TJSObject)\n  public\n    { The items that we are rendering in the tooltip. }\n    dataPoints: array of TChartTooltipItem;\n    dataPoints_: TJSArray; external name 'dataPoints';\n    { Positioning. }\n    xPadding: NativeInt;\n    yPadding: NativeInt;\n    xAlign: string;\n    yAlign: string;\n    { X and Y properties are the top left of the tooltip. }\n    x: NativeInt;\n    y: NativeInt;\n    width: NativeUInt;\n    height: NativeUInt;\n    { Where the tooltip points to. }\n    caretX: NativeInt;\n    caretY: NativeInt;\n    { Body\n       The body lines that need to be rendered.\n       Each object contains 3 parameters.\n       before: String[] // lines of text before the line with the color square.\n       lines: String[] // lines of text to render as the main item with color square.\n       after: String[] // lines of text to render after the main lines. }\n    body: array of TChartTooltipModelBody;\n    body_: TJSArray; external name 'body';\n    { Lines of text that appear after the title but before the body. }\n    beforeBody: TJSStringDynArray;\n    beforeBody_: TJSArray; external name 'beforeBody';\n    { Line of text that appear after the body and before the footer. }\n    afterBody: TJSStringDynArray;\n    afterBody_: TJSArray; external name 'afterBody';\n    bodyFontColor: string;\n    _bodyFontFamily: string;\n    _bodyFontStyle: string;\n    _bodyAlign: string;\n    bodyFontSize: NativeUInt;\n    bodySpacing: NativeInt;\n    { Title\n       lines of text that form the title. }\n    title: TJSStringDynArray;\n    title_: TJSArray; external name 'title';\n    titleFontColor: string;\n    _titleFontFamily: string;\n    _titleFontStyle: string;\n    titleFontSize: NativeUInt;\n    _titleAlign: string;\n    titleSpacing: NativeInt;\n    titleMarginBottom: NativeInt;\n    { Footer\n       lines of text that form the footer. }\n    footer: TJSStringDynArray;\n    footer_: TJSArray; external name 'footer';\n    footerFontColor: string;\n    _footerFontFamily: string;\n    _footerFontStyle: string;\n    footerFontSize: NativeUInt;\n    _footerAlign: string;\n    footerSpacing: NativeInt;\n    footerMarginTop: NativeInt;\n    { Appearance. }\n    caretSize: NativeUInt;\n    cornerRadius: NativeInt;\n    backgroundColor: string;\n    { Colors to render for each item in body[]. This is the color of the squares\n      in the tooltip. }\n    labelColors: TJSStringDynArray;\n    labelColors_: TJSArray; external name 'labelColors';\n    { 0 opacity is a hidden tooltip. }\n    opacity: NativeUInt;\n    legendColorBackground: string;\n    displayColors: Boolean;\n  end;\n\n  { Tooltips custom event handler. }\n  TChartTooltipsCustomEventHandler = reference to procedure(\n    const tooltipModel: TChartTooltipModel);\n\n  { Tooltip array event handler. }\n  TChartTooltipArrayEventHandler = reference to function(\n    const arr: array of TChartTooltipItem; const data: JSValue): string;\n\n  { Tooltip item event handler. }\n  TChartTooltipItemEventHandler = reference to function(\n    const item: TChartTooltipItem; const data: JSValue): string;\n\n  { Tooltip return colors class. }\n  TChartTooltipReturnColors = class external name 'Object' (TJSObject)\n  public\n    { Border color. }\n    borderColor: string;\n    { Background color. }\n    backgroundColor: string;\n  end;\n\n  { Tooltip colors event handler. }\n  TChartTooltipColorsEventHandler = reference to function(\n    const item: TChartTooltipItem;\n    const data: JSValue): TChartTooltipReturnColors;\n\n  { Tooltip callbacks class. }\n  TChartTooltipCallbacks = class external name 'Object' (TJSObject)\n  public\n    { Returns the text to render before the title. }\n    beforeTitle: TChartTooltipArrayEventHandler;\n    { Returns text to render as the title of the tooltip. }\n    title: TChartTooltipArrayEventHandler;\n    { Returns text to render after the title. }\n    afterTitle: TChartTooltipArrayEventHandler;\n    { Returns text to render before the body section. }\n    beforeBody: TChartTooltipArrayEventHandler;\n    { Returns text to render before an individual label. This will be called for\n      each item in the tooltip. }\n    beforeLabel: TChartTooltipItemEventHandler;\n    { Returns text to render for an individual item in the tooltip. }\n    label_: TChartTooltipItemEventHandler; external name 'label';\n    { Returns the colors to render for the tooltip item. }\n    labelColor: TChartTooltipColorsEventHandler;\n    { Returns the colors for the text of the label for the tooltip item. }\n    labelTextColor: TChartTooltipItemEventHandler;\n    { Returns text to render after an individual label. }\n    afterLabel: TChartTooltipItemEventHandler;\n    { Returns text to render after the body section. }\n    afterBody: TChartTooltipArrayEventHandler;\n    { Returns text to render before the footer section. }\n    beforeFooter: TChartTooltipArrayEventHandler;\n    { Returns text to render as the footer of the tooltip. }\n    footer: TChartTooltipArrayEventHandler;\n    { Text to render after the footer section. }\n    afterFooter: TChartTooltipArrayEventHandler;\n  end;\n\n  { Tooltip configuration class. }\n  TChartTooltipsConfiguration = class external name 'Object' (TJSObject)\n  public\n    { Are on-canvas tooltips enabled. }\n    enabled: Boolean;\n    { Custom tooltips allow you to hook into the tooltip rendering process so\n      that you can render the tooltip in your own custom way. Generally this is\n      used to create an HTML tooltip instead of an oncanvas one. }\n    custom: TChartTooltipsCustomEventHandler;\n    { Sets which elements appear in the tooltip. }\n    mode: string;\n    { If true, the tooltip mode applies only when the mouse position intersects\n      with an element. If false, the mode will be applied at all times. }\n    intersect: Boolean;\n    { The mode for positioning the tooltip. }\n    position: string;\n    { Tooltip callbacks. }\n    callbacks: TChartTooltipCallbacks;\n    { Allows sorting of tooltip items. }\n    itemSort: TJSArrayCompareEvent;\n    { Allows filtering of tooltip items. }\n    filter: TJSArrayCallback;\n    { Background color of the tooltip. }\n    backgroundColor: string;\n    { Title font. }\n    titleFontFamily: string;\n    { Title font size. }\n    titleFontSize: NativeUInt;\n    { Title font style. }\n    titleFontStyle: string;\n    { Title font color. }\n    titleFontColor: string;\n    { Spacing to add to top and bottom of each title line. }\n    titleSpacing: NativeInt;\n    { Margin to add on bottom of title section. }\n    titleMarginBottom: NativeInt;\n    { Body line font. }\n    bodyFontFamily: string;\n    { Body font size. }\n    bodyFontSize: NativeUInt;\n    { Body font style. }\n    bodyFontStyle: string;\n    { Body font color. }\n    bodyFontColor: string;\n    { Spacing to add to top and bottom of each tooltip item. }\n    bodySpacing: NativeInt;\n    { Footer font. }\n    footerFontFamily: string;\n    { Footer font size. }\n    footerFontSize: NativeUInt;\n    { Footer font style. }\n    footerFontStyle: string;\n    { Footer font color. }\n    footerFontColor: string;\n    { Spacing to add to top and bottom of each footer line. }\n    footerSpacing: NativeInt;\n    { Margin to add before drawing the footer. }\n    footerMarginTop: NativeInt;\n    { Padding to add on left and right of tooltip. }\n    xPadding: NativeInt;\n    { Padding to add on top and bottom of tooltip. }\n    yPadding: NativeInt;\n    { Extra distance to move the end of the tooltip arrow away from the tooltip\n      point. }\n    caretPadding: NativeInt;\n    { Size, in px, of the tooltip arrow. }\n    caretSize: NativeUInt;\n    { Radius of tooltip corner curves. }\n    cornerRadius: NativeInt;\n    { Color to draw behind the colored boxes when multiple items are in the\n      tooltip. }\n    multiKeyBackground: string;\n    { If true, color boxes are shown in the tooltip. }\n    displayColors: Boolean;\n    { Color of the border. }\n    borderColor: string;\n    { Size of the border. }\n    borderWidth: NativeUInt;\n  end;\n\n  { Element point class. }\n  TChartElementPoint = class external name 'Object' (TJSObject)\n  public\n    { Point radius. }\n    radius: NativeInt;\n    radius_: JSValue; external name 'radius';\n    { Point style. }\n    pointStyle: string;\n    { Point rotation (in degrees). }\n    rotation: NativeInt;\n    { Point fill color. }\n    backgroundColor: string;\n    backgroundColor_: JSValue; external name 'backgroundColor';\n    { Point stroke width. }\n    borderWidth: NativeUInt;\n    borderWidth_: JSValue; external name 'borderWidth';\n    { Point stroke color. }\n    borderColor: string;\n    borderColor_: JSValue; external name 'borderColor';\n    { Extra radius added to point radius for hit detection. }\n    hitRadius: NativeInt;\n    { Point radius when hovered. }\n    hoverRadius: NativeInt;\n    { Stroke width when hovered. }\n    hoverBorderWidth: NativeUInt;\n    hoverBorderWidth_: JSValue; external name 'hoverBorderWidth';\n    { Background colour when hovered. }\n    hoverBackgroundColor: string;\n    hoverBackgroundColor_: JSValue; external name 'hoverBackgroundColor';\n    { Border colour when hovered. }\n    hoverBorderColor: string;\n    hoverBorderColor_: JSValue; external name 'hoverBorderColor';\n  end;\n\n  { Element line class. }\n  TChartElementLine = class external name 'Object' (TJSObject)\n  public\n    { Bézier curve tension (0 for no Bézier curves). }\n    tension: Double;\n    { Line fill color. }\n    backgroundColor: string;\n    backgroundColor_: JSValue; external name 'backgroundColor';\n    { Line stroke width. }\n    borderWidth: NativeUInt;\n    borderWidth_: JSValue; external name 'borderWidth';\n    { Line stroke color. }\n    borderColor: string;\n    borderColor_: JSValue; external name 'borderColor';\n    { Line cap style. }\n    borderCapStyle: string;\n    { Line dash. }\n    borderDash: array of NativeInt;\n    borderDash_: TJSArray; external name 'borderDash';\n    { Line dash offset. }\n    borderDashOffset: NativeInt;\n    { Line join style. }\n    borderJoinStyle: string;\n    { true to keep Bézier control inside the chart, false for no restriction. }\n    capBezierPoints: Boolean;\n    { Fill location: 'zero', 'top', 'bottom', true (eq. 'zero') or false\n      (no fill). }\n    fill: JSValue;\n    { true to show the line as a stepped line (tension will be ignored). }\n    stepped: Boolean;\n  end;\n\n  { Element rectangle class. }\n  TChartElementRectangle = class external name 'Object' (TJSObject)\n  public\n    { Bar fill color. }\n    backgroundColor: string;\n    backgroundColor_: JSValue; external name 'backgroundColor';\n    { Bar stroke width. }\n    borderWidth: NativeUInt;\n    borderWidth_: JSValue; external name 'borderWidth';\n    { Bar stroke color. }\n    borderColor: string;\n    borderColor_: JSValue; external name 'borderColor';\n    { Skipped (excluded) border: 'bottom', 'left', 'top' or 'right'. }\n    borderSkipped: string;\n  end;\n\n  { Element arc class. }\n  TChartElementArc = class external name 'Object' (TJSObject)\n  public\n    { Arc fill color. }\n    backgroundColor: string;\n    backgroundColor_: JSValue; external name 'backgroundColor';\n    { Arc stroke color. }\n    borderColor: string;\n    borderColor_: JSValue; external name 'borderColor';\n    { Arc stroke width. }\n    borderWidth: NativeUInt;\n    borderWidth_: JSValue; external name 'borderWidth';\n  end;\n\n  { Elements configuration class. }\n  TChartElementsConfiguration = class external name 'Object' (TJSObject)\n  public\n    { Point configuration. }\n    point: TChartElementPoint;\n    { Line configuration. }\n    line: TChartElementLine;\n    { Rectangle configuration. }\n    rectangle: TChartElementRectangle;\n    { Arc configuration. }\n    arc: TChartElementArc;\n  end;\n\n  { Scale service class. }\n  TCharScaleService = class external name 'Object' (TJSObject)\n  public\n    (* Scale config defaults. *)\n    procedure registerScaleType(const type_: string;\n      const scaleConstructor, scaleDefaults: JSValue);\n    function getScaleConstructor(const type_: string): JSValue;\n    function getScaleDefaults(const type_: string): JSValue;\n    procedure updateScaleDefaults(const type_: string; const additions: JSValue);\n    procedure addScalesToLayout(chart: TChart);\n  end;\n\n  { Scale callback. }\n  TChartScaleCallback = reference to procedure(const axis: TJSObject);\n\n  { Scale callbacks class. }\n  TChartScaleCallbacks = class external name 'Object' (TJSObject)\n  public\n    { Callback called before the update process starts. }\n    beforeUpdate: TChartScaleCallback;\n    { Callback that runs before dimensions are set. }\n    beforeSetDimensions: TChartScaleCallback;\n    { Callback that runs after dimensions are set. }\n    afterSetDimensions: TChartScaleCallback;\n    { Callback that runs before data limits are determined. }\n    beforeDataLimits: TChartScaleCallback;\n    { Callback that runs after data limits are determined. }\n    afterDataLimits: TChartScaleCallback;\n    { Callback that runs before ticks are created. }\n    beforeBuildTicks: TChartScaleCallback;\n    { Callback that runs after ticks are created. Useful for filtering ticks. }\n    afterBuildTicks: TChartScaleCallback;\n    { Callback that runs before ticks are converted into strings. }\n    beforeTickToLabelConversion: TChartScaleCallback;\n    { Callback that runs after ticks are converted into strings. }\n    afterTickToLabelConversion: TChartScaleCallback;\n    { Callback that runs before tick rotation is determined. }\n    beforeCalculateTickRotation: TChartScaleCallback;\n    { Callback that runs after tick rotation is determined. }\n    afterCalculateTickRotation: TChartScaleCallback;\n    { Callback that runs before the scale fits to the canvas. }\n    beforeFit: TChartScaleCallback;\n    { Callback that runs after the scale fits to the canvas. }\n    afterFit: TChartScaleCallback;\n    { Callback that runs at the end of the update process. }\n    afterUpdate: TChartScaleCallback;\n  end;\n\n  { Scale class. }\n  TChartScaleConfiguration = class external name 'Object' (TJSObject)\n  public\n    { If set to false the axis is hidden from view. Overrides gridLines.display,\n      scaleLabel.display, and ticks.display. }\n    display: Boolean;\n    { Callback functions to hook into the axis lifecycle. }\n    callbacks: TChartScaleCallbacks;\n    { The weight used to sort the axis. Higher weights are further away from the\n      chart area. }\n    weight: NativeUInt;\n  end;\n\n  { Scales class. }\n  TChartScalesConfiguration = class external name 'Object' (TJSObject)\n  public\n    { xAxes properties. }\n    xAxes: array of JSValue;\n    xAxes_: TJSArray; external name 'xAxes';\n    { yAxes properties. }\n    yAxes: array of JSValue;\n    yAxes_: TJSArray; external name 'yAxes';\n  end;\n\n  { Base axes class. }\n  TChartAxes = class external name 'Object' (TChartDataset)\n  public\n    { Stacked chart. }\n    stacked: Boolean;\n  end;\n\n  { Scale grid line class. }\n  TChartScaleGridLine = class external name 'Object' (TJSObject)\n  public\n    { If false, do not display grid lines for this axis. }\n    display: Boolean;\n    { If true, gridlines are circular (on radar chart only). }\n    circular: Boolean;\n    { The color of the grid lines. If specified as an array, the first color applies to the first grid line, the second to the second grid line and so on. }\n    color: string;\n    colors: string; external name 'color';\n    color_: TJSArray; external name 'color';\n    { Length and spacing of dashes on grid lines. }\n    borderDash: NativeInt;\n    borderDashs: array of NativeInt; external name 'borderDash';\n    borderDash_: TJSArray; external name 'borderDash';\n    { Offset for line dashes. }\n    borderDashOffset: NativeInt;\n    { Stroke width of grid lines. }\n    lineWidth: NativeUInt;\n    lineWidths: array of NativeUInt; external name 'lineWidth';\n    lineWidth_: TJSArray; external name 'lineWidth';\n    { If true, draw border at the edge between the axis and the chart area. }\n    drawBorder: Boolean;\n    { If true, draw lines on the chart area inside the axis lines. This is\n      useful when there are multiple axes and you need to control which grid\n      lines are drawn. }\n    drawOnChartArea: Boolean;\n    { If true, draw lines beside the ticks in the axis area beside the chart. }\n    drawTicks: Boolean;\n    { Length in pixels that the grid lines will draw into the axis area. }\n    tickMarkLength: NativeUInt;\n    { Stroke width of the grid line for the first index (index 0). }\n    zeroLineWidth: NativeUInt;\n    { Stroke color of the grid line for the first index (index 0). }\n    zeroLineColor: string;\n    { Length and spacing of dashes of the grid line for the first\n      index (index 0). }\n    zeroLineBorderDash: NativeInt;\n    zeroLineBorderDashs: array of NativeInt; external name 'zeroLineBorderDash';\n    zeroLineBorderDash_: TJSArray; external name 'zeroLineBorderDash';\n    { Offset for line dashes of the grid line for the first index (index 0). }\n    zeroLineBorderDashOffset: NativeInt;\n    { If true, grid lines will be shifted to be between labels. This is set to\n      true for a category scale in a bar chart by default. }\n    offsetGridLines: Boolean;\n  end;\n\n  { Scale label class. }\n  TChartScaleLabel = class external name 'Object' (TJSObject)\n  public\n    { If true, display the axis title. }\n    display: Boolean;\n    { The text for the title. (i.e. \"# of People\" or \"Response Choices\"). }\n    labelString: string;\n    { Height of an individual line of text. }\n    lineHeight: JSValue;\n    { Font color for scale title. }\n    fontColor: string;\n    { Font family for the scale title, follows CSS font-family options. }\n    fontFamily: string;\n    { Font size for scale title. }\n    fontSize: NativeUInt;\n    { Font style for the scale title, follows CSS font-style options (i.e.\n      normal, italic, oblique, initial, inherit). }\n    fontStyle: string;\n    { Padding to apply around scale labels. Only top and bottom are\n      implemented. }\n    padding: JSValue;\n  end;\n\n  { Scale cartesian tick class. }\n  TChartScaleCartesianTick = class external name 'Object' (TChartAxes)\n  public\n    { If true, automatically calculates how many labels that can be shown and\n      hides labels accordingly. Turn it off to show all labels no matter what. }\n    autoSkip: Boolean;\n    { Padding between the ticks on the horizontal axis when autoSkip is enabled.\n      Note: Only applicable to horizontal scales. }\n    autoSkipPadding: NativeInt;\n    { Distance in pixels to offset the label from the centre point of the\n      tick (in the y direction for the x axis, and the x direction for the\n      y axis). Note: this can cause labels at the edges to be cropped by\n      the edge of the canvas. }\n    labelOffset: NativeInt;\n    { Maximum rotation for tick labels when rotating to condense labels.\n      Note: Rotation doesn't occur until necessary. Note: Only applicable to\n      horizontal scales. }\n    maxRotation: NativeInt;\n    { Minimum rotation for tick labels. Note: Only applicable to horizontal\n      scales. }\n    minRotation: NativeInt;\n    { Flips tick labels around axis, displaying the labels inside the chart\n      instead of outside. Note: Only applicable to vertical scales. }\n    mirror: Boolean;\n    { Padding between the tick label and the axis. When set on a vertical axis,\n      this applies in the horizontal (X) direction. When set on a horizontal\n      axis, this applies in the vertical (Y) direction. }\n    padding: NativeInt;\n  end;\n\n  { Scale cartesian class. }\n  TChartScaleCartesian = class external name 'Object' (TChartAxes)\n  public\n    { type (inherited):\n      Type of scale being employed. Custom scales can be created and registered\n      with a string key. This allows changing the type of an axis for a chart. }\n    { Position of the axis in the chart. Possible values are: 'top', 'left',\n      'bottom', 'right'. }\n    position: string;\n    { If true, extra space is added to the both edges and the axis is scaled to\n      fit into the chart area. This is set to true for a category scale in a bar\n      chart by default. }\n    offset: Boolean;\n    { The ID is used to link datasets and scale axes together. }\n    id: string;\n    { Grid lines configuration. }\n    gridLines: TChartScaleGridLine;\n    { Scale label configuration. }\n    scaleLabel: TChartScaleLabel;\n    { Tick configuration. }\n    ticks: TChartScaleCartesianTick;\n  end;\n\n  { Scale cartesian category tick class. }\n  TChartScaleCartesianCategoryTick = class external name 'Object' (TChartScaleCartesianTick)\n  public\n    { An array of labels to display. }\n    labels: TJSStringDynArray;\n    labels_: TJSArray; external name 'labels';\n    { The minimum item to display. }\n    min: string;\n    { The maximum item to display. }\n    max: string;\n  end;\n\n  { Scale cartesian linear tick class. }\n  TChartScaleCartesianLinearTick = class external name 'Object' (TChartScaleCartesianTick)\n  public\n    { If true, scale will include 0 if it is not already included. }\n    beginAtZero: Boolean;\n    { User defined minimum number for the scale, overrides minimum value from\n      data. }\n    min: NativeUInt;\n    { User defined maximum number for the scale, overrides maximum value from\n      data. }\n    max: NativeUInt;\n    { Maximum number of ticks and gridlines to show. }\n    maxTicksLimit: NativeUInt;\n    { If defined and stepSize is not specified, the step size will be rounded to\n      this many decimal places. }\n    precision: NativeInt;\n    { User defined fixed step size for the scale. }\n    stepSize: NativeUInt;\n    { Adjustment used when calculating the maximum data value. }\n    suggestedMax: NativeUInt;\n    { Adjustment used when calculating the minimum data value. }\n    suggestedMin: NativeUInt;\n  end;\n\n  { Scale cartesian logarithmic tick class. }\n  TChartScaleCartesianLogarithmicTick = class external name 'Object' (TChartScaleCartesianTick)\n  public\n    { User defined minimum number for the scale, overrides minimum value from\n      data. }\n    min: NativeUInt;\n    { User defined maximum number for the scale, overrides maximum value from\n      data. }\n    max: NativeUInt;\n  end;\n\n  { Scale cartesian time tick class. }\n  TChartScaleCartesianTimeTick = class external name 'Object' (TJSObject)\n  public\n    { How ticks are generated. }\n    source: string;\n  end;\n\n  { Scale cartesian time class. }\n  TChartScaleCartesianTime = class external name 'Object' (TChartScaleCartesianTick)\n  public\n    { Is the time shown? }\n    display: Boolean;\n    { How data is plotted. }\n    distribution: string;\n    { Determines the scale bounds. }\n    bounds: string;\n    {\n    ticks.source:\n      How ticks are generated. }\n    ticks: TChartScaleCartesianTimeTick;\n    {\n    time.displayFormats:\n      Sets how different time units are displayed. time.isoWeekday - If true and\n      the unit is set to 'week', then the first day of the week will be Monday.\n      Otherwise, it will be Sunday.\n    time.max:\n      If defined, this will override the data maximum.\n    time.min:\n      If defined, this will override the data minimum.\n    time.parser:\n      Custom parser for dates.\n    time.round:\n      If defined, dates will be rounded to the start of this unit. See Time\n      Units below for the allowed units.\n    time.tooltipFormat:\n      The moment js format string to use for the tooltip.\n    time.unit:\n      If defined, will force the unit to be a certain type. See Time Units\n      section below for details.\n    time.stepSize:\n      The number of units between grid lines.\n    time.minUnit:\n      The minimum display format to be used for a time unit.\n    }\n    time: TChartMoment;\n  end;\n\n  { Scale radial linear point label class. }\n  TChartScaleRadialLinearPointLabel = class external name 'Object' (TChartAxes)\n  public\n    { Callback function to transform data labels to point labels. The default\n      implementation simply returns the current string. }\n    callback: TJSPromiseResolver;\n    { Font color for point labels. }\n    fontColor: string;\n    fontColors: TJSStringDynArray; external name 'fontColor';\n    fontColor_: TJSArray; external name 'fontColor';\n    { Font family to use when rendering labels. }\n    fontFamily: string;\n    { Font size in pixels. }\n    fontSize: NativeUInt;\n    { Font style to use when rendering point labels. }\n    fontStyle: string;\n  end;\n\n  { Scale radial linear tick class. }\n  TChartScaleRadialLinearTick = class external name 'Object' (TChartAxes)\n  public\n    { Color of label backdrops. }\n    backdropColor: string;\n    { Horizontal padding of label backdrop. }\n    backdropPaddingX: NativeInt;\n    { Vertical padding of label backdrop. }\n    backdropPaddingY: NativeInt;\n    { If true, scale will include 0 if it is not already included. }\n    beginAtZero: Boolean;\n    { User defined minimum number for the scale, overrides minimum value from\n      data. }\n    min: NativeUInt;\n    { User defined maximum number for the scale, overrides maximum value from\n      data. }\n    max: NativeUInt;\n    { Maximum number of ticks and gridlines to show. }\n    maxTicksLimit: NativeUInt;\n    { If defined and stepSize is not specified, the step size will be rounded to\n      this many decimal places. }\n    precision: NativeInt;\n    { User defined fixed step size for the scale. }\n    stepSize: NativeUInt;\n    { Adjustment used when calculating the maximum data value. }\n    suggestedMax: NativeUInt;\n    { Adjustment used when calculating the minimum data value. }\n    suggestedMin: NativeUInt;\n    { If true, draw a background behind the tick labels. }\n    showLabelBackdrop: Boolean;\n  end;\n\n  { Scale radial linear angle line class. }\n  TChartScaleRadialLinearAngleLine = class external name 'Object' (TChartAxes)\n  public\n    { If true, angle lines are shown. }\n    display: Boolean;\n    { Color of angled lines. }\n    color: string;\n    { Width of angled lines. }\n    lineWidth: NativeUInt;\n  end;\n\n  { Scale radial linear class. }\n  TChartScaleRadialLinear = class external name 'Object' (TChartAxes)\n  public\n    { Angle line configuration. }\n    angleLines: TChartScaleRadialLinearAngleLine;\n    { Grid line configuration. }\n    gridLines: TChartScaleGridLine;\n    { Point label configuration. }\n    pointLabels: TChartScaleRadialLinearAngleLine;\n    { Tick configuration. }\n    ticks: TChartScaleRadialLinearTick;\n  end;\n\n  { Plugins hook argument class. }\n  TChartPluginsHookArgument = class external name 'Object' (TJSObject)\n  public\n    { The dataset index. }\n    index: NativeInt;\n    { The dataset metadata. }\n    meta: TJSObject;\n    { The current animation value, between 0.0 and 1.0. }\n    easingValue: Double;\n  end;\n\n{$PUSH}{$WARN 4501 OFF}\n\n  { Plugins hook class. }\n  TChartPluginsHook = class(TJSObject)\n  public\n    { Creates an instance of TChartPluginsHook. }\n    constructor new;\n    { Called before initializing chart. }\n    procedure beforeInit(chart: TChartController;\n      options: TChartOptions); virtual;\n    { Called after chart has been initialized and before the first update. }\n    procedure afterInit(chart: TChartController;\n      options: TChartOptions); virtual;\n    { Called before updating chart. If any plugin returns false, the update. }\n    function beforeUpdate(chart: TChartController;\n      options: TChartOptions): Boolean; virtual;\n    { Called after chart has been updated and before rendering. Note that this\n      hook will not be called if the chart update has been previously cancelled. }\n    procedure afterUpdate(chart: TChartController;\n      options: TChartOptions); virtual;\n    { Called before updating the chart datasets. If any plugin returns false,\n      the datasets update is cancelled until another update is triggered. }\n    function beforeDatasetsUpdate(chart: TChartController;\n      options: TChartOptions): Boolean; virtual;\n    { Called after the chart datasets have been updated. Note that this hook\n      will not be called if the datasets update has been previously cancelled. }\n    procedure afterDatasetsUpdate(chart: TChartController;\n      options: TChartOptions); virtual;\n    { Called before updating the chart dataset at the given args.index. If any\n      plugin returns false, the datasets update is cancelled until another\n      update is triggered. }\n    function beforeDatasetUpdate(chart: TChartController;\n      const args: TChartPluginsHookArgument;\n      options: TChartOptions): Boolean; virtual;\n    { Called after the chart datasets at the given args.index has been updated.\n      Note that this hook will not be called if the datasets update has been\n      previously cancelled. }\n    procedure afterDatasetUpdate(chart: TChartController;\n      const args: TChartPluginsHookArgument; options: TChartOptions); virtual;\n    { Called before laying out chart. If any plugin returns false, the layout\n      update is cancelled until another update is triggered. }\n    function beforeLayout(chart: TChartController;\n      options: TChartOptions): Boolean; virtual;\n    { Called after the chart has been layed out. Note that this hook will not be\n      called if the layout update has been previously cancelled. }\n    procedure afterLayout(chart: TChartController;\n      options: TChartOptions); virtual;\n    { Called before rendering chart. If any plugin returns false, the rendering\n      is cancelled until another render is triggered. }\n    function beforeRender(chart: TChartController;\n      options: TChartOptions): Boolean; virtual;\n    { Called after the chart has been fully rendered (and animation completed).\n      Note that this hook will not be called if the rendering has been\n      previously cancelled. }\n    procedure afterRender(chart: TChartController;\n      options: TChartOptions); virtual;\n    { Called before drawing chart at every animation frame specified by the\n      given easing value. If any plugin returns false, the frame drawing is\n      cancelled until another render is triggered. }\n    function beforeDraw(chart: TChartController; easingValue: NativeInt;\n      options: TChartOptions): Boolean; virtual;\n    { Called after the chart has been drawn for the specific easing value.\n      Note that this hook will not be called if the drawing has been previously\n      cancelled. }\n    procedure afterDraw(chart: TChartController; easingValue: NativeInt;\n      options: TChartOptions); virtual;\n    { Called before drawing the chart datasets. If any plugin returns false, the\n      datasets drawing is cancelled until another render is triggered. }\n    function beforeDatasetsDraw(chart: TChartController; easingValue: NativeInt;\n      options: TChartOptions): Boolean; virtual;\n    { Called after the chart datasets have been drawn. Note that this hook will\n      not be called if the datasets drawing has been previously cancelled. }\n    procedure afterDatasetsDraw(chart: TChartController; easingValue: NativeInt;\n      options: TChartOptions); virtual;\n    { Called before drawing the chart dataset at the given args.index (datasets\n      are drawn in the reverse order). If any plugin returns false, the datasets\n      drawing is cancelled until another render is triggered. }\n    function beforeDatasetDraw(chart: TChartController;\n      const args: TChartPluginsHookArgument;\n      options: TChartOptions): Boolean; virtual;\n    { Called after the chart datasets at the given args.index have been drawn\n      (datasets are drawn in the reverse order). Note that this hook will not be\n      called if the datasets drawing has been previously cancelled. }\n    procedure afterDatasetDraw(chart: TChartController;\n      const args: TChartPluginsHookArgument; options: TChartOptions); virtual;\n    { Called before drawing the tooltip. If any plugin returns false, the\n      tooltip drawing is cancelled until another render is triggered. }\n    function beforeTooltipDraw(chart: TChartController;\n      const args: TChartPluginsHookArgument;\n      options: TChartOptions): Boolean; virtual;\n    { Called after drawing the tooltip. Note that this hook will not be called\n      if the tooltip drawing has been previously cancelled. }\n    procedure afterTooltipDraw(chart: TChartController;\n      const args: TChartPluginsHookArgument; options: TChartOptions); virtual;\n    { Called before processing the specified event. If any plugin returns false,\n      the event will be discarded. }\n    procedure beforeEvent(chart: TChartController; event: TJSEvent;\n      options: TChartOptions); virtual;\n    { Called after the event has been consumed. Note that this hook will not be\n      called if the event has been previously discarded. }\n    procedure afterEvent(chart: TChartController; event: TJSEvent;\n      options: TChartOptions); virtual;\n    { Called after the chart as been resized. }\n    procedure resize(chart: TChartController; size: NativeInt;\n      options: TChartOptions); virtual;\n    { Called after the chart as been destroyed. }\n    procedure destroy(chart: TChartController; options: TChartOptions); virtual;\n  end;\n\n{$POP}\n\n  { Plugins class. }\n  TChartPlugins = class external name 'Chart' (TJSObject)\n  public\n    { Registers the given plugin(s) if not already registered. }\n    procedure register(plugin: TChartPlugins); overload;\n    procedure register(plugin: TJSObject); overload;\n    procedure register(plugin: TJSArray); overload;\n    { Unregisters the given plugin(s) only if registered. }\n    procedure unregister(plugin: TChartPlugins); overload;\n    procedure unregister(plugin: TJSObject); overload;\n    procedure unregister(plugin: TJSArray); overload;\n    { Remove all registered plugins. }\n    procedure clear;\n    { Returns the number of registered plugins. }\n    function count: NativeUInt;\n    { Returns all registered plugin instances. }\n    function getAll: TJSArray;\n    { Calls enabled plugins for `chart` on the specified hook and with the given\n      args. This method immediately returns as soon as a plugin explicitly\n      returns false. The returned value can be used, for instance, to interrupt\n      the current action. }\n    function notify(chart: TChart; const hook: string;\n      const args: TJSArray): Boolean; overload;\n    function notify(chart: TChart; const hook: string): Boolean; varargs; overload;\n  end;\n\n  { Plugins filler class. }\n  TChartPluginsFiller = class external name 'Object' (TJSObject)\n  public\n    { Fill propagation when target is hidden. }\n    propagate: Boolean;\n  end;\n\n  { Plugins configuration class. }\n  TChartPluginsConfiguration = class external name 'Object' (TChartPlugins)\n  public\n    { Filler properties. }\n    filler: TChartPluginsFiller;\n  end;\n\n  { Options context class. }\n  TChartOptionsContext = class external name 'Object' (TJSObject)\n  public\n    { The associated chart. }\n    chart: TChartController;\n    { Index of the current data. }\n    dataIndex: NativeInt;\n    { Dataset at index datasetIndex. }\n    dataset: TChartDataset;\n    { Index of the current dataset. }\n    datasetIndex: NativeInt;\n  end;\n\n  { Options class. }\n  TChartOptions = class external name 'Object' (TJSObject)\n  public\n    { Resizes the chart canvas when its container does. }\n    responsive: Boolean;\n    { Duration in milliseconds it takes to animate to new size after a resize\n      event. }\n    responsiveAnimationDuration: NativeUInt;\n    { Maintain the original canvas aspect ratio (width / height) when resizing. }\n    maintainAspectRatio: Boolean;\n    { Canvas aspect ratio (i.e. width / height, a value of 1 representing a\n      square canvas). Note that this option is ignored if the height is\n      explicitly defined either as attribute or via the style. }\n    aspectRatio: NativeInt;\n    { Called when a resize occurs. Gets passed two arguments: the chart instance\n      and the new size. }\n    onResize: TChartResizeEventHandler;\n    { Override the window's default devicePixelRatio. }\n    devicePixelRatio: NativeInt;\n    { Configure hover properties. }\n    hover: TChartHover;\n    { The events option defines the browser events that the chart should listen\n      to for tooltips and hovering. }\n    events: TJSStringDynArray;\n    events_: TJSArray; external name 'events';\n    { Called when any of the events fire. Called in the context of the chart and\n      passed the event and an array of active elements (bars, points, etc). }\n    onHover: TJSMouseEventHandler;\n    { Called if the event is of type 'mouseup' or 'click'. Called in the context\n      of the chart and passed the event and an array of active elements. }\n    onClick: THTMLClickEventHandler;\n    { Default color used in chart colors. }\n    defaultColor: string;\n    { Default font color for all text. }\n    defaultFontColor: string;\n    { Default font family for all text. }\n    defaultFontFamily: string;\n    { Default font size (in px) for text. Does not apply to radialLinear scale\n      point labels. }\n    defaultFontSize: NativeUInt;\n    { Default font style. Does not apply to tooltip title or footer. Does not\n      apply to chart title. }\n    defaultFontStyle: string;\n    { Default line height for all lines. }\n    defaultLineHeight: JSValue;\n    { If false, the lines between points are not drawn. }\n    showLines: Boolean;\n    { Configure animation properties. }\n    animation: TChartAnimationConfiguration;\n    animation_: JSValue; external name 'animation';\n    { Configure layout properties. }\n    layout: TChartLayoutConfiguration;\n    layout_: JSValue; external name 'layout';\n    { Default legend properties. }\n    legend: TChartLegendConfiguration;\n    legend_: JSValue; external name 'legend';\n    { Configure title properties. }\n    title: TChartTitleConfiguration;\n    title_: JSValue; external name 'title';\n    { Configure tooltip properties. }\n    tooltips: TChartTooltipsConfiguration;\n    tooltips_: JSValue; external name 'tooltips';\n    { Configure elements properties. }\n    elements: TChartElementsConfiguration;\n    elements_: JSValue; external name 'elements';\n    { Configure chart scale. }\n    scale: TChartScaleConfiguration;\n    scale_: JSValue; external name 'scale';\n    { Configure chart scales. }\n    scales: TChartScalesConfiguration;\n    scales_: JSValue; external name 'scales';\n    { Configure plugins properties. }\n    plugins: TChartPluginsConfiguration;\n    plugins_: JSValue; external name 'plugins';\n  end;\n\n  { X/Y data class. }\n  TChartXYData = class(TJSObject)\n  public\n    { X value. }\n    x: JSValue;\n    x_: Double; external name 'x';\n    { Y value. }\n    y: JSValue;\n    y_: Double; external name 'y';\n    { Creates an instance of TChartXYData. }\n    constructor new(const x, y: JSValue); overload;\n    constructor new(const x: JSValue); overload;\n  end;\n\n  { T/Y data class. }\n  TChartTYData = class(TJSObject)\n  public\n    { T value. }\n    t: JSValue;\n    t_: Double; external name 't';\n    { Y value. }\n    y: JSValue;\n    y_: Double; external name 'y';\n    { Creates an instance of TChartTYData. }\n    constructor new(const t, y: JSValue); overload;\n    constructor new(const t: JSValue); overload;\n  end;\n\n  { X/Y/R data class. }\n  TChartXYRData = class(TJSObject)\n  public\n    { X value. }\n    x: JSValue;\n    x_: Double; external name 'x';\n    { Y value. }\n    y: JSValue;\n    y_: Double; external name 'y';\n    { R value. }\n    r: JSValue;\n    r_: Double; external name 'e';\n    { Creates an instance of TChartXYRData. }\n    constructor new(const x, y, r: JSValue); overload;\n    constructor new(const x, y: JSValue); overload;\n    constructor new(const x: JSValue); overload;\n  end;\n\n  { X/Y/V data class. }\n  TChartXYVData = class(TJSObject)\n  public\n    { X value. }\n    x: JSValue;\n    x_: Double; external name 'x';\n    { Y value. }\n    y: JSValue;\n    y_: Double; external name 'y';\n    { V value. }\n    v: JSValue;\n    v_: Double; external name 'v';\n    { Creates an instance of TChartXYVData. }\n    constructor new(const x, y, v: JSValue); overload;\n    constructor new(const x, y: JSValue); overload;\n    constructor new(const x: JSValue); overload;\n  end;\n\n  { Data class. }\n  TChartData = class external name 'Object' (TJSObject)\n  public\n    { Label array passed to the chart. }\n    labels: TJSStringDynArray;\n    labels_: TJSArray; external name 'labels';\n    { Dataset array passed to the chart. }\n    datasets: array of TChartDataset;\n    datasets_: TJSArray; external name 'datasets';\n  end;\n\n  { Configuration class. }\n  TChartConfiguration = class external name 'Object' (TJSObject)\n  public\n    { Chart type. }\n    type_: string; external name 'type';\n    { Chart data. }\n    data: TChartData;\n    { Chart options. }\n    options: TChartOptions;\n    { Plugins options. }\n    plugins: array of TChartPlugins;\n    plugins_: TJSArray; external name 'plugins';\n  end;\n\n  { Line dataset class. }\n  TChartLineDataset = class external name 'Object' (TChartDataset)\n  public\n    { The ID of the x axis to plot this dataset on. If not specified, this\n      defaults to the ID of the first found x axis. }\n    xAxisID: string;\n    { The ID of the y axis to plot this dataset on. If not specified, this\n      defaults to the ID of the first found y axis. }\n    yAxisID: string;\n    { The fill color under the line. }\n    backgroundColor: string;\n    { The color of the line. }\n    borderColor: string;\n    { The width of the line in pixels. }\n    borderWidth: NativeUInt;\n    { Length and spacing of dashes. }\n    borderDash: array of NativeInt;\n    borderDash_: TJSArray; external name 'borderDash';\n    { Offset for line dashes. }\n    borderDashOffset: NativeInt;\n    { Cap style of the line. }\n    borderCapStyle: string;\n    { Line joint style. }\n    borderJoinStyle: string;\n    { Algorithm used to interpolate a smooth curve from the discrete data\n      points. }\n    cubicInterpolationMode: string;\n    { How to fill the area under the line. }\n    fill: JSValue;\n    { Bezier curve tension of the line. Set to 0 to draw straightlines. This\n      option is ignored if monotone cubic interpolation is used. }\n    lineTension: Double;\n    { The fill color for points. }\n    pointBackgroundColor: string;\n    pointBackgroundColors: TJSStringDynArray; external name 'pointBackgroundColor';\n    pointBackgroundColor_: TJSArray; external name 'pointBackgroundColor';\n    { The border color for points. }\n    pointBorderColor: string;\n    pointBorderColors: TJSStringDynArray; external name 'pointBorderColor';\n    pointBorderColor_: TJSArray; external name 'pointBorderColor';\n    { The width of the point border in pixels. }\n    pointBorderWidth: NativeUInt;\n    pointBorderWidths: array of NativeUInt; external name 'pointBorderWidth';\n    pointBorderWidth_: TJSArray; external name 'pointBorderWidth';\n    { The radius of the point shape. If set to 0, the point is not rendered. }\n    pointRadius: NativeInt;\n    pointRadiuses: array of NativeInt; external name 'pointRadius';\n    pointRadius_: TJSArray; external name 'pointRadius';\n    { Style of the point. }\n    pointStyle: string;\n    pointStyles: TJSStringDynArray; external name 'pointStyle';\n    pointStyle_: TJSArray; external name 'pointStyle';\n    pointStyleImage: TJSObject; external name 'pointStyle';\n    pointStyleImage_: TJSObjectDynArray; external name 'pointStyle';\n    { The rotation of the point in degrees. }\n    pointRotation: NativeInt;\n    pointRotations: array of NativeInt; external name 'pointRotation';\n    pointRotation_: TJSArray; external name 'pointRotation';\n    { The pixel size of the non-displayed point that reacts to mouse events. }\n    pointHitRadius: NativeInt;\n    pointHitRadiuses: array of NativeInt; external name 'pointHitRadius';\n    pointHitRadius_: TJSArray; external name 'pointHitRadius';\n    { Point background color when hovered. }\n    pointHoverBackgroundColor: string;\n    pointHoverBackgroundColors: TJSStringDynArray; external name 'pointHoverBackgroundColor';\n    pointHoverBackgroundColor_: TJSArray; external name 'pointHoverBackgroundColor';\n    { Point border color when hovered. }\n    pointHoverBorderColor: string;\n    pointHoverBorderColors: TJSStringDynArray; external name 'pointHoverBorderColor';\n    pointHoverBorderColor_: TJSArray; external name 'pointHoverBorderColor';\n    { Border width of point when hovered. }\n    pointHoverBorderWidth: NativeUInt;\n    pointHoverBorderWidths: array of NativeUInt; external name 'pointHoverBorderWidth';\n    pointHoverBorderWidth_: TJSArray; external name 'pointHoverBorderWidth';\n    { The radius of the point when hovered. }\n    pointHoverRadius: NativeInt;\n    pointHoverRadiuses: array of NativeInt; external name 'pointHoverRadius';\n    pointHoverRadius_: TJSArray; external name 'pointHoverRadius';\n    { If false, the line is not drawn for this dataset. }\n    showLine: Boolean;\n    { If true, lines will be drawn between points with no or null data. If\n      false, points with NaN data will create a break in the line. }\n    spanGaps: Boolean;\n    { If the line is shown as a stepped line. }\n    steppedLine: Boolean;\n    steppedLine_: string; external name 'steppedLine';\n    { Array data passed to the chart. }\n    data: array of Integer;\n    datas: array of TChartXYData; external name 'data';\n    data_: TJSArray; external name 'data';\n  end;\n\n  { Line options class. }\n  TChartLineOptions = class external name 'Object' (TJSObject)\n  public\n    { If false, the lines between points are not drawn. }\n    showLines: Boolean;\n    { If false, NaN data causes a break in the line. }\n    spanGaps: Boolean;\n  end;\n\n  { Bar dataset class. }\n  TChartBarDataset = class external name 'Object' (TChartDataset)\n  public\n    { The ID of the x axis to plot this dataset on. If not specified, this\n      defaults to the ID of the first found x axis. }\n    xAxisID: string;\n    { The ID of the y axis to plot this dataset on. If not specified, this\n      defaults to the ID of the first found y axis. }\n    yAxisID: string;\n    { The fill color of the bar. }\n    backgroundColor: string;\n    backgroundColors: TJSStringDynArray; external name 'backgroundColor';\n    backgroundColor_: TJSArray; external name 'backgroundColor';\n    { The color of the bar border. }\n    borderColor: string;\n    borderColors: TJSStringDynArray; external name 'borderColor';\n    borderColor_: TJSArray; external name 'borderColor';\n    { The stroke width of the bar in pixels. }\n    borderWidth: NativeUInt;\n    borderWidths: array of NativeUInt; external name 'borderWidth';\n    borderWidth_: TJSArray; external name 'borderWidth';\n    { Which edge to skip drawing the border for. }\n    borderSkipped: string;\n    { The fill colour of the bars when hovered. }\n    hoverBackgroundColor: string;\n    hoverBackgroundColors: TJSStringDynArray; external name 'hoverBackgroundColor';\n    hoverBackgroundColor_: TJSArray; external name 'hoverBackgroundColor';\n    { The stroke colour of the bars when hovered. }\n    hoverBorderColor: string;\n    hoverBorderColors: TJSStringDynArray; external name 'hoverBorderColor';\n    hoverBorderColor_: TJSArray; external name 'hoverBorderColor';\n    { The stroke width of the bars when hovered. }\n    hoverBorderWidth: NativeUInt;\n    hoverBorderWidths: array of NativeUInt; external name 'hoverBorderWidth';\n    hoverBorderWidth_: TJSArray; external name 'hoverBorderWidth';\n    { The ID of the group to which this dataset belongs to (when stacked, each\n      group will be a separate stack). }\n    stack: string;\n    { Array data passed to the chart. }\n    data: array of Integer;\n    datas: array of TChartXYData; external name 'data';\n    data_: TJSArray; external name 'data';\n  end;\n\n  { Bar options class. }\n  TChartBarOptions = class external name 'Object' (TJSObject)\n  public\n    { Percent (0-1) of the available width each bar should be within the\n      category width. 1.0 will take the whole category width and put the bars\n      right next to each other. }\n    barPercentage: Double;\n    { Percent (0-1) of the available width each category should be within the\n      sample width. }\n    categoryPercentage: Double;\n    { Manually set width of each bar in pixels. If set to 'flex', it computes\n      \"optimal\" sample widths that globally arrange bars side by side. If not\n      set (default), bars are equally sized based on the smallest interval. }\n    barThickness: JSValue;\n    { Set this to ensure that bars are not sized thicker than this. }\n    maxBarThickness: NativeInt;\n    {\n    gridLines.offsetGridLines:\n      If true, the bars for a particular data point fall between the grid lines.\n      The grid line will move to the left by one half of the tick interval. If\n      false, the grid line will go right down the middle of the bars. }\n    gridLines: TChartScaleGridLine;\n  end;\n\n  { Radar dataset class. }\n  TChartRadarDataset = class external name 'Object' (TChartDataset)\n  public\n    { The fill color under the line. }\n    backgroundColor: string;\n    backgroundColor_: JSValue; external name 'backgroundColor';\n    { The color of the line. }\n    borderColor: string;\n    borderColor_: JSValue; external name 'borderColor';\n    { The width of the line in pixels. }\n    borderWidth: NativeUInt;\n    borderWidth_: JSValue; external name 'borderWidth';\n    { Length and spacing of dashes. }\n    borderDash: array of NativeInt;\n    borderDash_: TJSArray; external name 'borderDash';\n    { Offset for line dashes. }\n    borderDashOffset: NativeInt;\n    { Cap style of the line. }\n    borderCapStyle: string;\n    { Line joint style. }\n    borderJoinStyle: string;\n    { How to fill the area under the line. }\n    fill: JSValue;\n    { Bezier curve tension of the line. Set to 0 to draw straightlines. }\n    lineTension: NativeInt;\n    { The fill color for points. }\n    pointBackgroundColor: string;\n    pointBackgroundColors: TJSStringDynArray; external name 'pointBackgroundColor';\n    pointBackgroundColor_: TJSArray; external name 'pointBackgroundColor';\n    { The border color for points. }\n    pointBorderColor: string;\n    pointBorderColors: TJSStringDynArray; external name 'pointBorderColor';\n    pointBorderColor_: TJSArray; external name 'pointBorderColor';\n    { The width of the point border in pixels. }\n    pointBorderWidth: NativeUInt;\n    pointBorderWidths: array of NativeUInt; external name 'pointBorderWidth';\n    pointBorderWidth_: TJSArray; external name 'pointBorderWidth';\n    { The radius of the point shape. If set to 0, the point is not rendered. }\n    pointRadius: NativeInt;\n    pointRadiuses: array of NativeInt; external name 'pointRadius';\n    pointRadius_: TJSArray; external name 'pointRadius';\n    { The rotation of the point in degrees. }\n    pointRotation: NativeInt;\n    pointRotations: array of NativeInt; external name 'pointRotation';\n    pointRotation_: TJSArray; external name 'pointRotation';\n    { Style of the point. }\n    pointStyle: string;\n    pointStyles: TJSStringDynArray; external name 'pointStyle';\n    pointStyle_: TJSArray; external name 'pointStyle';\n    pointStyleImage: TJSObject; external name 'pointStyle';\n    pointStyleImage_: TJSObjectDynArray; external name 'pointStyle';\n    { The pixel size of the non-displayed point that reacts to mouse events. }\n    pointHitRadius: NativeInt;\n    pointHitRadiuses: array of NativeInt; external name 'pointHitRadius';\n    pointHitRadius_: TJSArray; external name 'pointHitRadius';\n    { Point background color when hovered. }\n    pointHoverBackgroundColor: string;\n    pointHoverBackgroundColors: TJSStringDynArray; external name 'pointHoverBackgroundColor';\n    pointHoverBackgroundColor_: TJSArray; external name 'pointHoverBackgroundColor';\n    { Point border color when hovered. }\n    pointHoverBorderColor: string;\n    pointHoverBorderColors: TJSStringDynArray; external name 'pointHoverBorderColor';\n    pointHoverBorderColor_: TJSArray; external name 'pointHoverBorderColor';\n    { Border width of point when hovered. }\n    pointHoverBorderWidth: NativeUInt;\n    pointHoverBorderWidths: array of NativeUInt; external name 'pointHoverBorderWidth';\n    pointHoverBorderWidth_: TJSArray; external name 'pointHoverBorderWidth';\n    { The radius of the point when hovered. }\n    pointHoverRadius: NativeInt;\n    pointHoverRadiuses: array of NativeInt; external name 'pointHoverRadius';\n    pointHoverRadius_: TJSArray; external name 'pointHoverRadius';\n    { Array data passed to the chart. }\n    data: array of Integer;\n    datas: array of TChartXYData; external name 'data';\n    data_: TJSArray; external name 'data';\n  end;\n\n  { Unlike other charts, the radar chart has no chart specific options. }\n\n  { Doughnut dataset class. }\n  TChartDoughnutDataset = class external name 'Object' (TChartDataset)\n  public\n    { The fill color of the arcs in the dataset. }\n    backgroundColor: TJSStringDynArray;\n    backgroundColor_: TJSArray; external name 'backgroundColor';\n    { The border color of the arcs in the dataset. }\n    borderColor: TJSStringDynArray;\n    borderColor_: TJSArray; external name 'borderColor';\n    { The border width of the arcs in the dataset. }\n    borderWidth: array of NativeUInt;\n    borderWidth_: TJSArray; external name 'borderWidth';\n    { The fill colour of the arcs when hovered. }\n    hoverBackgroundColor: TJSStringDynArray;\n    hoverBackgroundColor_: TJSArray; external name 'hoverBackgroundColor';\n    { The stroke colour of the arcs when hovered. }\n    hoverBorderColor: TJSStringDynArray;\n    hoverBorderColor_: TJSArray; external name 'hoverBorderColor';\n    { The stroke width of the arcs when hovered. }\n    hoverBorderWidth: array of NativeUInt;\n    hoverBorderWidth_: TJSArray; external name 'hoverBorderWidth';\n    { Array data passed to the chart. }\n    data: array of Integer;\n    data_: TJSArray; external name 'data';\n  end;\n\n  { Doughnut options class. }\n  TChartDoughnutOptions = class external name 'Object' (TJSObject)\n  public\n    { The percentage of the chart that is cut out of the middle. }\n    cutoutPercentage: NativeInt;\n    { Starting angle to draw arcs from. }\n    rotation: Double;\n    { Sweep to allow arcs to cover. }\n    circumference: Double;\n    {\n    animation.animateRotate:\n      If true, the chart will animate in with a rotation animation. This\n      property is in the options.animation object.\n    animation.animateScale:\n      If true, will animate scaling the chart from the center outwards. }\n    animation: TChartAnimationConfiguration;\n  end;\n\n  { Pie dataset class. }\n  TChartPieDataset = class external name 'Object' (TChartDoughnutDataset)\n  end;\n\n  { Pie options class. }\n  TChartPieOptions = class external name 'Object' (TChartDoughnutOptions)\n  end;\n\n  { Polar area dataset class. }\n  TChartPolarAreaDataset = class external name 'Object' (TChartDataset)\n  public\n    { The fill color of the arcs in the dataset. }\n    backgroundColor: TJSStringDynArray;\n    backgroundColor_: TJSArray; external name 'backgroundColor';\n    { The border color of the arcs in the dataset. }\n    borderColor: TJSStringDynArray;\n    borderColor_: TJSArray; external name 'borderColor';\n    { The border width of the arcs in the dataset. }\n    borderWidth: array of NativeUInt;\n    borderWidth_: TJSArray; external name 'borderWidth';\n    { The fill colour of the arcs when hovered. }\n    hoverBackgroundColor: TJSStringDynArray;\n    hoverBackgroundColor_: TJSArray; external name 'hoverBackgroundColor';\n    { The stroke colour of the arcs when hovered. }\n    hoverBorderColor: TJSStringDynArray;\n    hoverBorderColor_: TJSArray; external name 'hoverBorderColor';\n    { The stroke width of the arcs when hovered. }\n    hoverBorderWidth: array of NativeUInt;\n    hoverBorderWidth_: TJSArray; external name 'hoverBorderWidth';\n    { Array data passed to the chart. }\n    data: array of Integer;\n    data_: TJSArray; external name 'data';\n  end;\n\n  { Polar area options class. }\n  TChartPolarAreaOptions = class external name 'Object' (TJSObject)\n  public\n    { Starting angle to draw arcs for the first item in a dataset. }\n    startAngle: Double;\n    {\n    animation.animateRotate:\n      If true, the chart will animate in with a rotation animation. This\n      property is in the options.animation object.\n    animation.animateScale:\n      If true, will animate scaling the chart from the center outwards. }\n    animation: TChartAnimationConfiguration;\n  end;\n\n  { Bubble dataset class. }\n  TChartBubbleDataset = class external name 'Object' (TChartDataset)\n  public\n    { Bubble background color. }\n    backgroundColor: string;\n    backgroundColor_: JSValue; external name 'backgroundColor';\n    { Bubble border color. }\n    borderColor: string;\n    borderColor_: JSValue; external name 'borderColor';\n    { Bubble border width (in pixels). }\n    borderWidth: NativeUInt;\n    borderWidth_: JSValue; external name 'borderWidth';\n    { Bubble background color when hovered. }\n    hoverBackgroundColor: string;\n    hoverBackgroundColor_: JSValue; external name 'hoverBackgroundColor';\n    { Bubble border color hovered. }\n    hoverBorderColor: string;\n    hoverBorderColor_: JSValue; external name 'hoverBorderColor';\n    { Bubble border width when hovered (in pixels). }\n    hoverBorderWidth: NativeUInt;\n    hoverBorderWidth_: JSValue; external name 'hoverBorderWidth';\n    { Bubble additional radius when hovered (in pixels). }\n    hoverRadius: NativeInt;\n    { Bubble additional radius for hit detection (in pixels). }\n    hitRadius: NativeInt;\n    { Bubble shape style. }\n    pointStyle: string;\n    { Bubble rotation (in degrees). }\n    rotation: NativeInt;\n    { Bubble radius (in pixels). }\n    radius: NativeInt;\n    radius_: JSValue; external name 'radius';\n    { Array data passed to the chart. }\n    data: array of TChartXYRData;\n    data_: TJSArray; external name 'data';\n  end;\n\n  { Bubble options class. }\n  TChartBubbleOptions = class(TChartOptions)\n  end;\n\n  { Scatter dataset class. }\n  TChartScatterDataset = class external name 'Object' (TChartLineDataset)\n  end;\n\n  { Scatter options class. }\n  TChartScatterOptions = class external name 'Object' (TChartOptions)\n  end;\n\n  { Default properties class. }\n  TChartDefaults = class external name 'Object' (TJSObject)\n  public\n    { Global properties of the chart. }\n    global: TChartOptions;\n    { Default line options. }\n    line: TChartLineOptions;\n    { Default bar options. }\n    bar: TChartBarOptions;\n    { Default doughnut options. }\n    doughnut: TChartDoughnutOptions;\n    { Default pie options. }\n    pie: TChartPieOptions;\n    { Default polar area options. }\n    polarArea: TChartPolarAreaOptions;\n    { Default bubble options. }\n    bubble: TChartBubbleOptions;\n    { Default scatter options. }\n    scatter: TChartScatterOptions;\n  end;\n\n  { ChartJS class. }\n  TChart = class external name 'Chart' (TJSObject)\n  public class var\n    { Default properties of the chart. }\n    defaults: TChartDefaults;\n    { Default configuration for the scales. }\n    scaleService: TCharScaleService;\n    { Plugins object. }\n    plugins: TChartPlugins;\n  public\n    { Configuration object. }\n    config: TChartConfiguration;\n    { Creates a new instante of TChart. }\n    constructor new(item: JSValue); overload;\n    { Creates a new instante of TChart. }\n    constructor new(item: JSValue; const config: JSValue); overload;\n    { Destroys any chart instances that are created. }\n    procedure destroy;\n    { Triggers an update of the chart. }\n    procedure update(const config: JSValue); overload;\n    procedure update; overload;\n    { Reset the chart to it's state before the initial animation. }\n    procedure reset;\n    { Triggers a redraw of all chart elements. }\n    procedure render(const config: JSValue); overload;\n    procedure render; overload;\n    { Stops any current animation loop. }\n    function stop: TChart;\n    { Resizes the canvas element. }\n    function resize: TChart;\n    { Clears the chart canvas. }\n    function clear: TChart;\n    { This returns a base 64 encoded string of the chart in it's current state. }\n    function toBase64Image: string;\n    { Returns a HTML string of a legend for that chart. }\n    function generateLegend: string;\n    { Returns the single element at the event position. }\n    function getElementAtEvent(ev: TJSEvent): TJSArray;\n    { Returns all elements at the same data index. }\n    function getElementsAtEvent(ev: TJSEvent): TJSArray;\n    { Looks for the element under the event point, then returns all elements\n      from that dataset. }\n    function getDatasetAtEvent(ev: TJSEvent): TJSArray;\n    { Looks for the dataset that matches the current index and returns that\n      metadata. }\n    function getDatasetMeta(index: Integer): JSValue;\n  end;\n\n  { Controller class. }\n  TChartController = class external name 'Chart' (TChart)\n  public\n    id: JSValue;\n    ctx: TJSCanvasRenderingContext2D;\n    canvas: TJSHTMLCanvasElement;\n    width: NativeUInt;\n    height:  NativeUInt;\n    aspectRatio: NativeInt;\n    options: TChartOptions;\n    controller: TChart;\n    data: TChartData;\n    scales: TJSObject;\n    lastActive: TJSArray;\n    active: TJSArray;\n    animating: Boolean;\n    boxes: TJSArray;\n    chartArea: TChartPadding;\n    _bufferedRender: Boolean;\n    _bufferedRequest: TJSObject;\n  end;\n\nimplementation\n\n{$PUSH}{$WARN 5027 OFF}\n\nconstructor TChartPluginsHook.new;\nvar\n  dummy: Pointer;\nbegin\n  dummy := @beforeInit;\n  dummy := @afterInit;\n  dummy := @beforeUpdate;\n  dummy := @afterUpdate;\n  dummy := @beforeDatasetsUpdate;\n  dummy := @afterDatasetsUpdate;\n  dummy := @beforeDatasetUpdate;\n  dummy := @afterDatasetUpdate;\n  dummy := @beforeLayout;\n  dummy := @afterLayout;\n  dummy := @beforeRender;\n  dummy := @afterRender;\n  dummy := @beforeDraw;\n  dummy := @afterDraw;\n  dummy := @beforeDatasetsDraw;\n  dummy := @afterDatasetsDraw;\n  dummy := @beforeDatasetDraw;\n  dummy := @afterDatasetDraw;\n  dummy := @beforeTooltipDraw;\n  dummy := @afterTooltipDraw;\n  dummy := @beforeEvent;\n  dummy := @afterEvent;\n  dummy := @resize;\n  dummy := @destroy;\nend;\n\n{$POP}\n\nprocedure TChartPluginsHook.beforeInit(chart: TChartController;\n  options: TChartOptions);\nbegin\nend;\n\nprocedure TChartPluginsHook.afterInit(chart: TChartController;\n  options: TChartOptions);\nbegin\nend;\n\nfunction TChartPluginsHook.beforeUpdate(chart: TChartController;\n  options: TChartOptions): Boolean;\nbegin\n  Result := True;\nend;\n\nprocedure TChartPluginsHook.afterUpdate(chart: TChartController;\n  options: TChartOptions);\nbegin\nend;\n\nfunction TChartPluginsHook.beforeDatasetsUpdate(chart: TChartController;\n  options: TChartOptions): Boolean;\nbegin\n  Result := True;\nend;\n\nprocedure TChartPluginsHook.afterDatasetsUpdate(chart: TChartController;\n  options: TChartOptions);\nbegin\nend;\n\nfunction TChartPluginsHook.beforeDatasetUpdate(chart: TChartController;\n  const args: TChartPluginsHookArgument; options: TChartOptions): Boolean;\nbegin\n  Result := True;\nend;\n\nprocedure TChartPluginsHook.afterDatasetUpdate(chart: TChartController;\n  const args: TChartPluginsHookArgument; options: TChartOptions);\nbegin\nend;\n\nfunction TChartPluginsHook.beforeLayout(chart: TChartController;\n  options: TChartOptions): Boolean;\nbegin\n  Result := True;\nend;\n\nprocedure TChartPluginsHook.afterLayout(chart: TChartController;\n  options: TChartOptions);\nbegin\nend;\n\nfunction TChartPluginsHook.beforeRender(chart: TChartController;\n  options: TChartOptions): Boolean;\nbegin\n  Result := True;\nend;\n\nprocedure TChartPluginsHook.afterRender(chart: TChartController;\n  options: TChartOptions);\nbegin\nend;\n\nfunction TChartPluginsHook.beforeDraw(chart: TChartController;\n  easingValue: NativeInt; options: TChartOptions): Boolean;\nbegin\n  Result := True;\nend;\n\nprocedure TChartPluginsHook.afterDraw(chart: TChartController;\n  easingValue: NativeInt; options: TChartOptions);\nbegin\nend;\n\nfunction TChartPluginsHook.beforeDatasetsDraw(chart: TChartController;\n  easingValue: NativeInt; options: TChartOptions): Boolean;\nbegin\n  Result := True;\nend;\n\nprocedure TChartPluginsHook.afterDatasetsDraw(chart: TChartController;\n  easingValue: NativeInt; options: TChartOptions);\nbegin\nend;\n\nfunction TChartPluginsHook.beforeDatasetDraw(chart: TChartController;\n  const args: TChartPluginsHookArgument; options: TChartOptions): Boolean;\nbegin\n  Result := True;\nend;\n\nprocedure TChartPluginsHook.afterDatasetDraw(chart: TChartController;\n  const args: TChartPluginsHookArgument; options: TChartOptions);\nbegin\nend;\n\nfunction TChartPluginsHook.beforeTooltipDraw(chart: TChartController;\n  const args: TChartPluginsHookArgument; options: TChartOptions): Boolean;\nbegin\n  Result := True;\nend;\n\nprocedure TChartPluginsHook.afterTooltipDraw(chart: TChartController;\n  const args: TChartPluginsHookArgument; options: TChartOptions);\nbegin\nend;\n\nprocedure TChartPluginsHook.beforeEvent(chart: TChartController;\n  event: TJSEvent; options: TChartOptions);\nbegin\nend;\n\nprocedure TChartPluginsHook.afterEvent(chart: TChartController;\n  event: TJSEvent; options: TChartOptions);\nbegin\nend;\n\nprocedure TChartPluginsHook.resize(chart: TChartController; size: NativeInt;\n  options: TChartOptions);\nbegin\nend;\n\nprocedure TChartPluginsHook.destroy(chart: TChartController;\n  options: TChartOptions);\nbegin\nend;\n\n{ TChartXYData }\n\nconstructor TChartXYData.new(const x, y: JSValue);\nbegin\n  Self.x := x;\n  Self.y := y;\nend;\n\nconstructor TChartXYData.new(const x: JSValue);\nbegin\n  Self.x := x;\n  Self.y := 0;\nend;\n\n{ TChartTYData }\n\nconstructor TChartTYData.new(const t, y: JSValue);\nbegin\n  Self.t := t;\n  Self.y := y;\nend;\n\nconstructor TChartTYData.new(const t: JSValue);\nbegin\n  Self.t := t;\n  Self.y := 0;\nend;\n\n{ TChartXYRData }\n\nconstructor TChartXYRData.new(const x, y, r: JSValue);\nbegin\n  Self.x := x;\n  Self.y := y;\n  Self.r := r;\nend;\n\nconstructor TChartXYRData.new(const x, y: JSValue);\nbegin\n  Self.x := x;\n  Self.y := y;\n  Self.r := 0;\nend;\n\nconstructor TChartXYRData.new(const x: JSValue);\nbegin\n  Self.x := x;\n  Self.y := 0;\n  Self.r := 0;\nend;\n\n{ TChartXYVData }\n\nconstructor TChartXYVData.new(const x, y, v: JSValue);\nbegin\n  Self.x := x;\n  Self.y := y;\n  Self.v := v;\nend;\n\nconstructor TChartXYVData.new(const x, y: JSValue);\nbegin\n  Self.x := x;\n  Self.y := y;\n  Self.v := 0;\nend;\n\nconstructor TChartXYVData.new(const x: JSValue);\nbegin\n  Self.x := x;\n  Self.y := 0;\n  Self.v := 0;\nend;\n\nend.\n","program demopolararea;\n\n{$MODE OBJFPC}\n{$MODESWITCH EXTERNALCLASS}\n\nuses\n  ChartJS;\n\nvar\n  config: TChartConfiguration;\n  dataset: TChartPolarAreaDataset;\nbegin\n  config := TChartConfiguration.new;\n  config.type_ := 'polarArea';\n  config.data := TChartData.new;\n  config.data.labels := ['Red', 'Green', 'Yellow', 'Grey', 'Blue'];\n  dataset := TChartPolarAreaDataset.new;\n  dataset.data := [11, 16, 7, 3, 14];\n  dataset.backgroundColor := ['rgb(255, 99, 132)', 'rgb(75, 192, 192)',\n    'rgb(255, 205, 86)', 'rgb(201, 203, 207)', 'rgb(54, 162, 235)'];\n  config.data.datasets := [dataset];\n  TChart.new('myChart', config);\nend.\n"],"names":[],"mappingsxzCA;;;AAu2BA;AACE,mBAAU;nBADZ;AAv2BA;ACAA,iBAKS,UALT;;;;3BCGA,sBAKS,eALT;;;;rCCfA,sBAAsB,oBAAtB;;;1CASE;AACA;AACF;AACE,kBAA8B,IAApB,MAAoB;5BAC9B,eAAM,KAAN,GAAgB;vBAChB,eAAM,KAAN,GAA0B,IAAX,MAAW;jCAC1B,eAAM,KAAK,OAAX,GAAsB,CAAC,MAAO,QAAS,SAAU,OAAQ,MAAnC;nEACtB,mBAAkC,IAAvB,MAAuB;7BAClC,gBAAO,KAAP,GAAgB,CAAC,GAAI,GAAI,EAAG,EAAG,EAAf;rCAChB,gBAAO,gBAAP,GAA2B,CAAC,oBAAqB,oBAC/C,oBAAqB,qBAAsB,mBADlB;xIAE3B,eAAM,KAAK,SAAX,GAAwB,CAAC,YAAD;7CACjB,QAAP,KAAO,CAAI,UAAW,WAAf;nCAVT;AAXA"}